<?php

// Auto-generated by SmartestFileSystemHelper - Do Not Edit

/**
  * This file is a cached combination of the following files, included as one files to improve speed:

  * System/Data/DataQuery.class.php
  * System/Data/SmartestQuery.class.php
  * System/Data/SmartestQueryResultSet.class.php
  * System/Data/SmartestObjectModelHelper.class.php
  * System/Data/SmartestGenericListedObject.class.php
  * Library/Quince/Quince.class.php
  * Library/Quince/QuinceException.class.php
  * Library/Quince/QuinceBase.interface.php
  * System/Templating/SmartestEngine.class.php
  * System/Templating/SmartyManager.class.php
  * System/Controller/SmartestController.class.php
  * System/Templating/SmartestTemplateHelper.class.php
  * System/Base/SmartestBaseProcess.class.php
  * System/Base/SmartestBaseApplication.class.php
  * Library/API/SmartestApplication.class.php
  * Library/API/SmartestUser.class.php

  */



include_once("System/Data/DataSet.class.php");
include_once("System/Data/Condition.class.php");
include_once("System/Data/DataQueryHelper.class.php");

class DataQuery{
	
	// which model is being worked with?
	var $model = null;
	
	// model is valid
	var $modelIsValid = false;
	
	// the helper object
	var $dataSetHelper;
	
	// an array of conditions
	var $conditions;
	
	// an array of items that are in the current data set
	var $items;
	
	// data access object
	var $database;
	
	const EQUAL = 0;
	const EQUALS = 0;
	const EQUALTO = 0;
	const EQUAL_TO = 0;
	
	const NOT_EQUAL = 1;
	const NOTEQUAL = 1;
	
	const CONTAINS = 2;
	
	const NOTCONTAINS = 3;
	const NOT_CONTAINS = 3;
	const DOESNOTCONTAIN = 3;
	const DOES_NOT_CONTAIN = 3;
	
	const STARTSWITH = 4;
	const STARTS_WITH = 4;
	
	const ENDSWITH = 5;
	const ENDS_WITH = 5;
	
	// constructor
	function DataQuery($model_id){
		
		$this->database = $_SESSION["database"];
		$this->helper = new DataQueryHelper($this->database);
		$this->conditions = array(); 
		
		if(is_numeric($model_id) && $this->helper->getIsValidItemClass($model_id)){
			$this->model = $model_id;	
			$this->helper->defineModelProperties($model_id);

		}	
	}
	
	// tell the data manager which model you are using
	function setModel($model_id){
		
		if(!$this->model  && $this->helper->getIsValidItemClass($model_id)){
			$this->model = $model_id;
		}
		
		$this->helper->defineModelProperties($model_id);
	}
	
	// set a condition for inclusion in the dataset
	function addCondition($property_id, $operator, $value){
		if($this->model && ($this->helper->getPropertyLabel($property_id))){	
			$this->conditions[] = new Condition($property_id,$operator,$value);			
		}	
	}
	
	function getDataArray($dataset){
		return $dataset->arraySet;	
	
	}
	
	// retrieve the current dataset with property name as key value
	function select(){
		$setArray = $this->helper->getModelProperties($this->conditions,$this->model,'id');
		$datasetObject = new DataSet($setArray);
		return $datasetObject;
	}

	// retrieve the current dataset with property id as key value
	function selectAsIds(){
		return $this->helper->getModelProperties($this->conditions,$this->model,'id');
	}

	// retrieve the current data as array
	function selectToArray(){
		return $this->helper->getModelProperties($this->conditions,$this->model,'name');
	}

	// get an item with a particular id
	function retrieveByPk($id){
		$this->helper->getItemDetails($id);
	}
	
	// return the number of items in the current dataset
	function count($dataset){
		$array=$this->getDataArray($dataset);
		return count($array);
	}
	
	// set the sort order of the dataset(type =ASC or DESC)
	function setSortOrder($property_array, $type){
		if($type=="asc"){
			return array_multisort($property_array, SORT_ASC);
		}else{
			return array_multisort($property_array, SORT_DESC);
		}
	}
	
	function intersect(){
		func_get_args();
	}
	
	function merge(){
		func_get_args();
	}
}







class SmartestQuery{
	
	protected $database;
	protected $conditions = array();
	protected $model;
	
	const EQUAL = 0;
	const EQUALS = 0;
	
	const NOT_EQUAL = 1;
	const NOTEQUAL = 1;
	
	const CONTAINS = 2;
	
	const NOTCONTAINS = 3;
	const NOT_CONTAINS = 3;
	const DOESNOTCONTAIN = 3;
	const DOES_NOT_CONTAIN = 3;
	
	const STARTSWITH = 4;
	const STARTS_WITH = 4;
	
	const ENDSWITH = 5;
	const ENDS_WITH = 5;
	
	const GREATERTHAN = 6;
	const GREATER_THAN = 6;
	
	const LESSTHAN = 7;
	const LESS_THAN = 7;
	
	public function __construct($model_id){
		
		$this->database =& SmartestPersistentObject::get('db:main');
		
		if(!SmartestCache::hasData('model_id_name_lookup', true)){
			self::init(true);
		}
		
		$models = SmartestCache::load('model_id_name_lookup', true);
		
		if(in_array($model_id, $models)){
			
			$this->model = new SmartestModel;
			$this->model->hydrate($model_id);
			
		}else{
			// ERROR: using non-existent model
		}
		
	}
	
	static function init($force_regenerate=false){
		
		if(!defined('SM_QUERY_INIT_COMPLETE') || $force_regenerate == true){
		
			$database =& SmartestPersistentObject::get('db:main');
			
			if(SmartestCache::hasData('model_id_name_lookup', true) && $force_regenerate != true){
				
				$models = SmartestCache::load('model_id_name_lookup', true);
				
				// print_r($models);
				
				foreach($models as $constant_name => $constant_value){
				
					if(!defined($constant_name)){
 						define($constant_name, $constant_value, true);
 					}
 				
				}
			
			}else{
			
				
				$sql = "SELECT itemclass_id, itemclass_name, itemclass_plural_name FROM ItemClasses";
 				$results = $database->queryToArray($sql);
 			
 				if(is_array($results)){
 				
 					$models = array();
 					
 					foreach($results as $item_class){
 					
 						$constant_name = SmartestStringHelper::toCamelCase($item_class["itemclass_name"]);
 						
 					
 						if(!defined($constant_name)){
 							define($constant_name, $item_class["itemclass_id"], true);
 						}
 						
 						$models[$constant_name] = $item_class["itemclass_id"];
 						
 					}
 					
 					// print_r($models);
 					
 					SmartestCache::save('model_id_name_lookup', $models, -1, true);
 				}
			}
			
			if(SmartestCache::hasData('model_class_names', true)){
			
				$modelnames = SmartestCache::load('model_class_names', true);
			
			}else{
				
				$sql = "SELECT itemclass_id, itemclass_name, itemclass_plural_name FROM ItemClasses";
 				$results = $database->queryToArray($sql);
 				$modelnames = array();
 				
 				foreach($results as $item_class){
 					
 					$modelnames[$item_class["itemclass_id"]] = SmartestStringHelper::toCamelCase($item_class["itemclass_name"]);
 						
 				}
 				
 				SmartestCache::save('model_class_names', $modelnames, -1, true);
				
			}
			
			foreach($modelnames as $class_id => $class_name){
				
				// echo 'Loading Auto OM Class: auto'.$class_name.'<br />';
				
				if(is_file(SM_ROOT_DIR.'System/Cache/ObjectModel/Models/auto'.$class_name.'.class.php')){
					include SM_ROOT_DIR.'System/Cache/ObjectModel/Models/auto'.$class_name.'.class.php';
				}else{
					// build auto class
					if(SmartestObjectModelHelper::buildAutoClassFile($class_id, $class_name)){
						include SM_ROOT_DIR.'System/Cache/ObjectModel/Models/auto'.$class_name.'.class.php';
					}else{
						throw new SmartestException('Could not auto-generate model class: '.$class_name, SM_ERROR_MODEL);
					}
				}
				
				// echo 'Loading OM Class: '.$class_name.'<br />';
					
				if(is_file(SM_ROOT_DIR.'Library/ObjectModel/'.$class_name.'.class.php')){
					include SM_ROOT_DIR.'Library/ObjectModel/'.$class_name.'.class.php';
				}else{
					// build extensible class
					if(SmartestObjectModelHelper::buildClassFile($class_id, $class_name)){
						include SM_ROOT_DIR.'System/Data/ObjectModel/'.$class_name.'.class.php';
					}else{
						throw new SmartestException('Could not auto-generate model class: '.$class_name, SM_ERROR_MODEL);
					}
				}
 				
			}
			
			define('SM_QUERY_INIT_COMPLETE', true);
		
		}else{
			// init has already taken place - do nothing
		}
	}
	
	public function getModel(){
		return $this->model;
	}
	
	public function add($property_id, $value, $operator=0){
		if(!is_object($value) && !is_array($value)){
			$this->conditions[$property_id] = array('field'=>$property_id, 'value'=>$value, 'operator'=>$operator);
		}
	}
	
	public function clear(){
		$this->conditions = array();
	}
	
	private function getSimpleIdsArray($array){
		
		$new_array = array();
		
		foreach($array as $result){
			$av = array_values($result);
			$new_array[] = $av[0];
		}
		
		return $new_array;
	}
	
	private function createDataSet($conditions, $draft){
		
		$ids_array = array();
		
		$models = array_flip(SmartestCache::load('model_id_name_lookup', true));
		
		// print_r($models);
		
		$class_name = $models[$this->model->getId()];
		
		// var_dump($this->model->getId());
		
		$ds = new SmartestQueryResultSet($this->model->getId(), $this->model->getClassName(), $draft);
		
		if(count($this->conditions)){
		    
			$array_values = array_values($this->conditions);
			
			// print_r($array_values);
			
			$ids_array = $array_values[0]['ids'];
			
			for($i=1; $i < count($array_values); $i++){
			    $new_ids_array = array_intersect($ids_array, $array_values[$i]['ids']);
			    // 
			    $ids_array = $new_ids_array;
			}
			
			foreach($ids_array as $item_id){
			    $ds->insertItemId($item_id);
			}
			
			// print_r($ds);
			
			
			// return $ds;
			/* foreach($av[0]['ids'] as $item_id){
			    // echo $class_name;
				$item = new $class_name;
				$item->hydrate($item_id);
				$dataset->insert($item);
			} */
			
		}else{
			// no conditions specified - return all items of the model
			
			$ids_array = array();
			
			foreach($ids_array as $item_id){
			    $ds->insertItemId($item_id);
			}
		}
		
		return $ds;
		
	}
	
	public function doSelect($draft=false){
		
		// if($forcedb){
			// do it the slow way, getting ids of matching rows and hydrating them
			
			if($draft){
			    $value_field = 'itempropertyvalue_draft_content';
			}else{
			    $value_field = 'itempropertyvalue_content';
			}
			
			if(count($this->conditions)){
			
			    foreach($this->conditions as $property_id => $condition){
				
    				if($condition['field'] == SmartestCmsItem::ID){
				
    				    $sql = "SELECT DISTINCT itempropertyvalue_item_id FROM Items, ItemPropertyValues WHERE Items.item_itemclass_id='".$this->model->getId()."' AND ItemPropertyValues.itempropertyvalue_item_id=Items.item_id AND Items.item_deleted != '1' AND Items.item_id ";
				
    				}else if($condition['field'] == SmartestCmsItem::NAME){
				
    				    $sql = "SELECT DISTINCT itempropertyvalue_item_id FROM Items, ItemPropertyValues WHERE Items.item_itemclass_id='".$this->model->getId()."' AND ItemPropertyValues.itempropertyvalue_item_id=Items.item_id AND Items.item_deleted != '1' AND Items.item_name ";
				
    				}else{
				
    				    $sql = "SELECT DISTINCT itempropertyvalue_item_id FROM Items, ItemPropertyValues WHERE ItemPropertyValues.itempropertyvalue_property_id='$property_id' AND Items.item_deleted != '1' AND Items.item_id = ItemPropertyValues.itempropertyvalue_item_id AND ".$value_field.' ';
				    
    				}
				
    				switch($condition['operator']){
			
    				    case 0:
        				$sql .= "='".mysql_real_escape_string($condition['value'])."'";
        				break;
			
        				case 1:
        				$sql .= " != '".mysql_real_escape_string($condition['value'])."'";
        				break;
			
        				case 2:
        				$sql .= " LIKE '%".mysql_real_escape_string($condition['value'])."%'";
        				break;
			
        				case 3:
        				$sql .= " NOT LIKE '%".mysql_real_escape_string($condition['value'])."%'";
        				break;
			
        				case 4:
        				$sql .= " LIKE '".mysql_real_escape_string($condition['value'])."%'";
        				break;
			
        				case 5:
        				$sql .= " LIKE '%".mysql_real_escape_string($condition['value'])."'";
        				break;
    				
        				case 6:
        				$sql .= " > '".mysql_real_escape_string($condition['value'])."'";
        				break;
    				
        				case 7:
        				$sql .= " < '".mysql_real_escape_string($condition['value'])."'";
        				break;
    		        }
				    
				    $sql .= " AND Items.item_public='TRUE'";
				    
    			    $result = $this->database->queryToArray($sql);
				
    				$this->conditions[$property_id]['ids'] = $this->getSimpleIdsArray($result);
				
    			}
    		
			    return $this->createDataSet($conditions, $draft);
			}else{
			    
			    $sql = "SELECT DISTINCT item_id FROM Items WHERE Items.item_itemclass_id='".$this->model->getId()."'";
			    $result = $this->database->queryToArray($sql);
			    return $this->createDataSet(array(), $draft);
			    
			}
			
		// }
	}
	
	public function doSelectOne(){
		
	}
}



class SmartestQueryResultSet{
	
	protected $_model_id;
	protected $_model_class;
	protected $_items = array();
	protected $_unused_items = array();
	protected $_item_ids = array();
	protected $_unused_item_ids = array();
	protected $_items_retrieval_attempted = false;
	protected $_sort_field = '';
	protected $_sort_field_direction = 'ASC';
	protected $_is_draft = false;
	protected $database;
	
	public function __construct($model_id, $model_class, $draft=false){
		$this->_model_id = $model_id;
		$this->_model_class = $model_class;
		$this->_is_draft = $draft;
		$this->database = SmartestPersistentObject::get('db:main');
	}
	
	private function getSimpleIdsArray($array){
		
		$new_array = array();
		
		foreach($array as $result){
			$av = array_values($result);
			$new_array[] = $av['itempropertyvalue_item_id'];
		}
		
		return $new_array;
	}
	
	public function sort($field, $direction='ASC'){
	    
	    $sql = "SELECT DISTINCT itempropertyvalue_item_id FROM Items, ItemProperties, ItemPropertyValues WHERE Items.item_itemclass_id='".$this->_model_id."' AND ItemPropertyValues.itempropertyvalue_item_id=Items.item_id";
	    
	    if($field != SmartestCmsItem::ID && $field != SmartestCmsItem::NAME){
	        $sql .= " AND ItemPropertyValues.itempropertyvalue_property_id=ItemProperties.itemproperty_id AND ItemPropertyValues.itempropertyvalue_property_id='".$field."'";
	    }
	    
	    $sql .= " AND Items.item_id IN (";
	    
	    $i = 0;
	    
	    foreach($this->_item_ids as $id){
	        
	        if($i > 0){
	            $sql .= ',';
	        }
	        
	        $sql .= $id;
	        
	        $i++;
	    }
	    
	    $sql .= ') ORDER BY ';
	    
		if($field == SmartestCmsItem::ID){
		
		    $sql .= "Items.item_id ";
		
		}else if($field == SmartestCmsItem::NAME){
		    
		    $sql .= "Items.name_id ";
		    // $sql = "SELECT DISTINCT itempropertyvalue_item_id FROM Items, ItemPropertyValues WHERE Items.item_itemclass_id='".$this->model->getId()."' AND ItemPropertyValues.itempropertyvalue_item_id=Items.item_id AND Items.item_name ";
		
		}else{
		    
		    if($this->_is_draft){
		        $sql .= "ItemPropertyValues.itempropertyvalue_draft_content ";
		    }else{
		        $sql .= "ItemPropertyValues.itempropertyvalue_content ";
		    }
		    // $sql = "SELECT DISTINCT itempropertyvalue_item_id FROM ItemPropertyValues WHERE ItemPropertyValues.itempropertyvalue_property_id='$property_id' AND ".$value_field.' ';
		    
		}
		
		$sql .= $direction;
		$result = $this->database->queryToArray($sql);
		
		// echo $sql;
		
		// print_r($result);
		
		$ids = array();
		
		foreach($result as $record){
		    $ids[] = $record['itempropertyvalue_item_id'];
		}
		
		$this->_item_ids = $ids;
		
		$this->_items_retrieval_attempted = false;
		
		// print_r($ids);
		
		// print_r($this->getSimpleIdsArray($result));
		
		// $this->_item_ids = $this->getSimpleIdsArray($result);
		
		// print_r( $this->_item_ids);
		
	}
	
	public function insert($object){
		
		if($object instanceof $this->_model_class){
			$this->_items[] = $object;
			$this->_items_retrieval_attempted = false;
		}else{
		    throw new SmartestException(sprintf("Cannot add object of type %s to result set of class %s", get_class($object), $this->_model_class));
		}
		
	}
	
	public function insertItemId($id){
	    if(!in_array($id, $this->_item_ids)){
	        $this->_item_ids[] = $id;
	    }
	}
	
	public function getFirst(){
	    
	    $this->getItems();
	    
	    if(count($this->_items)){
	        return $this->_items[0];
	    }
	}
	
	public function __toArray(){
		
	}
	
	public function getItems(){
	    
	    if(!$this->_items_retrieval_attempted){
	    
	        $this->_items = array();
	    
	        foreach($this->_item_ids as $id){
	            
	            $obj = new $this->_model_class;
	            
	            if($obj->hydrate($id, $this->_is_draft)){
	                $this->_items[] = $obj;
                }
	        }
	        
	        $this->_items_retrieval_attempted = true;
	    
        }
        
        return $this->_items;
	    
		// return $this->_items;
	}

}



class SmartestObjectModelHelper{

	static function buildClassFile($id, $name){
		
		$className = $name;
		
		if($file = file_get_contents(SM_ROOT_DIR.'System/Data/ObjectModelTemplates/object_template.txt')){
		
			$file = str_replace('__THISCLASSNAME__', $className, $file);
			$file = str_replace('__AUTOCLASSNAME__', 'auto'.$className, $file);
			$file = str_replace('__TIME__', date("Y-m-d h:i:s"), $file);
		
			file_put_contents(SM_ROOT_DIR.'Library/ObjectModel/'.$className.'.class.php', $file);
			
			return true;
			
		}else{
			return false;
		}
		
	}
	
	static function buildAutoClassFile($id, $name){
		
		$className = $name;
		$constants = '';
		$model = new SmartestModel();
		$model->hydrate($id);
		
		foreach($model->getProperties() as $property){
			
			$constant_name  = SmartestStringHelper::toConstantName($property->getName());
			$constant_value = $property->getId();
			
			if(is_numeric($constant_name{0})){
				$constant_name = '_'.$constant_name;
			}
			
			$new_constant = 'const '.$constant_name.' = '.$constant_value.";\n";
			// echo $new_constant;
			// print_r($property);
			$constants .= $new_constant;
			
		}
		
		if($file = file_get_contents(SM_ROOT_DIR.'System/Data/ObjectModelTemplates/autoobject_template.txt')){
			
			$file = str_replace('__THISCLASSNAME__', 'auto'.$className, $file);
			$file = str_replace('__THECONSTANTS__', $constants, $file);
			$file = str_replace('__MODEL_ID__', $id, $file);
			$file = str_replace('__TIME__', date("Y-m-d h:i:s"), $file);
		
			// echo $file;
		
			file_put_contents(SM_ROOT_DIR.'System/Cache/ObjectModel/Models/auto'.$className.'.class.php', $file);
			return true;
		}else{
			return false;
		}
		
	}

}



// a class for tag contents, search resuts, and any other time where mixed content is listed.

class SmartestGenericListedObject{
    
    protected $_internal_object;
    protected $_type;
    protected $_properties = array();
    
    const PAGE = 1;
    const ITEM = 2;
    
    function __construct($object){
        
        if(is_object($object)){
            
            if(is_subclass_of($object, 'SmartestCmsItem')){
                
                $this->_internal_object = $object;
                $this->_type = self::ITEM;
                
                $this->_properties['url'] = $this->_internal_object->getUrl();
                $this->_properties['title'] = $this->_internal_object->getItem()->getName();
                
                if($this->_internal_object->getIsPublished()){
                    $this->_properties['date'] = $this->_internal_object->getItem()->getLastPublished();
                }else{
                    $this->_properties['date'] = $this->_internal_object->getItem()->getCreated();
                }
                
                $this->_properties['description'] = SmartestStringHelper::toSummary($this->_internal_object->getDescriptionFieldContents());
                
                $this->_properties['type'] = $this->_internal_object->getModel()->getName();
                
                $this->_properties['id'] = $this->_internal_object->getId();
                $this->_properties['webid'] = $this->_internal_object->getWebid();
            
            }else if($object instanceof SmartestItem){
            
                 $this->_internal_object = $object;
                 $this->_type = self::ITEM;

                 $this->_properties['url'] = $this->_internal_object->getUrl();
                 $this->_properties['title'] = $this->_internal_object->getName();

                 if($this->_internal_object->getIsPublished()){
                     $this->_properties['date'] = $this->_internal_object->getLastPublished();
                 }else{
                     $this->_properties['date'] = $this->_internal_object->getCreated();
                 }

                 $this->_properties['description'] = SmartestStringHelper::toSummary($this->_internal_object->getDescriptionFieldContents());

                 $this->_properties['type'] = $this->_internal_object->getModel()->getName();
                 
                 $this->_properties['id'] = $this->_internal_object->getId();
                 $this->_properties['webid'] = $this->_internal_object->getWebid();
            
            }else if($object instanceof SmartestPage || is_subclass_of($object, 'SmartestPage')){
                
                $this->_internal_object = $object;
                $this->_type = self::PAGE;
                $this->_properties['title'] = $this->_internal_object->getTitle();
                
                if($this->_internal_object->getIsPublished()){
                    $this->_properties['date'] = $this->_internal_object->getLastPublished();
                }else{
                    $this->_properties['date'] = $this->_internal_object->getCreated();
                }
                
                $this->_properties['url'] = SM_CONTROLLER_DOMAIN.$this->_internal_object->getDefaultUrl();
                
                $this->_properties['description'] = $this->_internal_object->getDescription();
                
                $this->_properties['type'] = 'Page';
                
                $this->_properties['id'] = $this->_internal_object->getId();
                $this->_properties['webid'] = $this->_internal_object->getWebid();
                
            }else{
                throw new SmartestException("Supplied data must be an object that is either a SmartestPage or a subclass of either SmartestPage or SmartestCmsItem");
            }
            
        }else{
            throw new SmartestException("Supplied data must be an object in SmartestGenericListedObject");
        }
    }
    
    function getTitle(){
        return $this->_properties['title'];
    }
    
    function getDescription(){
        return $this->_properties['description'];
    }
    
    function getDate(){
        return $this->_properties['date'];
    }
    
    function getUrl(){
        return $this->_properties['url'];
    }
    
    function __toArray(){
        
        $data = array();
        $data = $this->_properties;
        $data['object'] = $this->_internal_object->__toArray();
        return $data;
        
    }
    
}



/**
  * Quince (formerly "PHP Controller")
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
  * 
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
  * 
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
  *
  * Quince(TM) PHP Controller
  * Based on the original PHP-Controller API, but rewritten from the ground up, and about 10ms faster!
  *
  * Typical runtime about 12-13ms on a good server
  * We are always looking to make this faster
  *
  * @category   Controller
  * @package    Quince
  * @license    Lesser GNU Public License
  * @author     Marcus Gilroy-Ware <marcus@visudo.com>
  * @author     Eddie Tejeda <eddie@visudo.com>
  * @copyright  Marcus Gilroy-Ware & Eddie Tejeda 2006
  * @version    0.8
  */
  
  // Pear, Xml_serializer, and XML_Unserializer must all be included

class Quince{
	// settings
	
	// prefix methods with a string, for instance "execute"
	var $methodPrefix = null;
	
	// the suffix used on class files. The default is the standard .class.php
	var $suffix = ".class.php";
	
	// should the controller check class files to make sure the method is implemented? default is true
	var $checkClassForMethod = true;
	
	// use dot syntax? modulename.methodname?
	var $dotSyntaxEnabled = false;
	
	// the contents of the mmain xml file as an array
	var $xmlDataArray;
	
	var $domain;
	var $domainPath;
	
	var $request;
	var $templateName;
	
	var $getVariables = null;
	var $readyToPerformAction = false;
	var $methodName;
	var $actionName;
	
	var $className;
	var $moduleNamesMap = array();
	var $moduleIndicesMap = array();
	
	var $user_object;
	var $object_stack = array();
	
	var $modules;
	var $moduleName;
	var $moduleIndex;
	var $moduleDirectories;
	var $defaultModule;
	var $defaultModuleIndex;
	var $ajaxModules = array();
	var $ajaxModulesIndex = 0;
	
	var $aliases;
	var $aliasMatch;
	var $aliasDestination;
	var $formForwards;
	var $options = array();
	
	var $requestIsUsingAlias = false;
	var $contentRetrieved = false;
	var $activeRequestArray;
	var $activeRequestArrayName;
	
	var $startTime;
	var $prepareTime;
	var $postActionTime;
	var $prepareTimeTaken;
	var $postActionTimeTaken;
	
	var $namespace = "";
	var $namespaceArray = array();
	var $initialNamespace = "";
	var $namespaces;
	var $defaultNamespace;
	
	var $log;
	var $errors;
	var $halt = false;
	var $result = null;
	var $cache_dir = './';
	
	var $num_forwards = 0;
	
	const FAIL = '__QUINCE_FAILED_ACTION';
	const NODISPLAY = '__QUINCE_NO_UI_FEEDBACK';
	
	const E_ALL = 100;
	const E_NOTICE = 101;
	const E_ERROR = 102;
	
	const NS_NONE     = 0;
	const NS_DOMAIN   = 1;
	const NS_METHOD   = 2;
	const NS_CLASS    = 4;
	const NS_TEMPLATE = 8;
	const NS_ALL      = 15;
	
	const CLASS_CHECK_ALWAYS = 2;
	const CLASS_CHECK_NON_ALIAS = 1;
	const CLASS_CHECK_NEVER = false;
	
	/* A transitional feature - allows users to replace <module>, <modules> and <domain-path>
	with the older <page>, <pages>, and <application-path> respectively */
	var $useOldTerms = false;
	
	// Deprecated:
	var $sectionName;
	var $domainName;

	function Quince($filename = "controller.xml", $automatic=true, $use_cache=true){
		
		$this->_log('Instantiating the controller...');
		$this->_log('User has IP '.$_SERVER['REMOTE_ADDR'].'; Time is '.date("l jS F Y h:i:s a"));
		
		if(is_array($filename)){
			// If the first argument is an array, it is an array containing all the configuration info
			$this->options = $filename;
			if(isset($this->options['filename'])){$filename = $this->options['filename'];}else{$filename = "controller.xml";}
			if(isset($this->options['auto'])){$automatic = $this->options['auto'];}
		}else{
			$this->options = array();
			$this->options['filename'] = $filename;
			$this->options['auto'] = $automatic;
		}
		
		$this->checkClassForMethod = self::CLASS_CHECK_ALWAYS;
		
		$this->startTime = microtime(true);
		
		// Firstly, check that the data originally from the XML file is present, either in the disk cache or the session:
		
		if($hash = $this->getXmlDataHash() && $xmldata = $this->getXmlDataArray()){ // If the xml controller file is already cached in the session
			
			// var_dump($hash);
			
			// if the file hasn't changed and the hashes are the same
			if($hash == md5_file($filename)){
			
				// LOG: Loaded XML Data From Session
				$this->_log('Quince XML file unchanged. Loaded controller data from cache.');
				$this->xmlDataArray = $xmldata;
				
			}else{ // the file has changed, so the hashes are different
				
				// get the data from the XML
				if($data = $this->loadXmlControllerFile($filename)){
					
					$this->_log('Quince XML file has been modified.');
					$this->_log('Loaded XML data From file: '.$filename);
					
					$this->setXmlDataHash(md5_file($filename));
					$this->setXmlDataArray($data);
					
					// $_SESSION["xmlDataHash"] = md5_file($filename);
					$this->xmlDataArray = $data;
					
				}else{
					// file not loaded
					// ERROR
					
					$this->_error('Quince XML file was not found or could not be loaded: '.$filename, true);
				}
			}
			
		}else{ // try and load the xml controller file, since it wasn't cached at all
		
			// LOG: XML Data Not Cached
			$this->_log('Quince XML data not found in session cache');
			
			if($data = $this->loadXmlControllerFile($filename)){
				$this->_log('Loaded XML data From file: '.$filename);
				
				// file successfully loaded
				$hash = md5_file($filename);
				
				$this->setXmlDataHash($hash);
				$this->setXmlDataArray($data);
				
				$this->xmlDataArray = $data;
				
			}else{
				// file not loaded
				// ERROR
				$this->_error('Controller data needed, but Quince XML file could not be loaded', true);
			}
		}
		
		// echo $_SESSION["xmlDataHash"];
		
		$this->activeRequestArray = count($_POST) ? $_POST : $_GET;
		$this->activeRequestArrayName = count($_POST) ? "POST" : "GET";
		
		if($use_cache == false){
			$this->_purge();
		}
		
		if($automatic == true){
			$this->_log("Dispatch is going to begin automatically.");
			$this->dispatch();
		}
		
	}
	
	function getXmlDataHash(){
		// looks in the cache file on disk. if it's not there, it looks in the session. if not there either it returns false.
		if($data = $this->loadFromDiskCache('quincexmlhash')){
			return $data;
		}else if(array_key_exists('xmlDataHash', $_SESSION) && is_array($_SESSION["xmlDataHash"])){
			return $_SESSION["xmlDataHash"];
		}else{
			return false;
		}
	}
	
	function setXmlDataHash($data){
		// writes to a cache file, or if that isn't available, to the session
		if($this->saveToDiskCache('quincexmlhash', $data)){
			return true;
		}else{
			$_SESSION["xmlDataHash"] = $data;
			return true;
		}
	}
	
	function getXmlDataArray(){
		// looks in the cache file on disk. if it's not there, it looks in the session. if not there either it returns false.
		if($data = $this->loadFromDiskCache('quincexmldata')){
			return $data;
		}else if(array_key_exists('xmlDataArray', $_SESSION) && is_array($_SESSION["xmlDataArray"])){
			return $_SESSION["xmlDataArray"];
		}else{
			return false;
		}
	}
	
	function setXmlDataArray($data){
		// writes to a cache file, or if that isn't available, to the session
		if($this->saveToDiskCache('quincexmldata', $data)){
			return true;
		}else{
			$_SESSION["xmlDataArray"] = $data;
			return true;
		}
	}
	
	function dispatch(){
		// The order these functions are called in is very important
		$this->_log("Beginning dispatch...");
		$this->request = $this->getControllerUrlRequest();
		$this->namespaces = $this->setNamespaces();
		$this->setDomain();
		$this->moduleDirectories = $this->getModuleDirectories();
		$this->modules = $this->setModules();
		$this->aliases = $this->setAliases();
		$this->formForwards = $this->getformForwards();
		$this->setModule();
		$this->setTemplate();
		$this->setClass();
		$this->setMethod();
		$this->readyToPerformAction = true;
	}
	
	function loadXmlControllerFile($filename){
		
		// load xml controller
		// LOG: Loading Controller XML file
		$this->_log("Attempting to load principal Quince XML file: $filename");
		
		if(class_exists("XML_Unserializer")){
    		
    		$option = array('complexType' => 'array', 'parseAttributes' => TRUE);
    		$unserialized = new XML_Unserializer($option);
    		$result = $unserialized->unserialize($filename, true);
    
    		if (PEAR::isError($result)) {
				// ERROR: XML file could not be parsed: PEAR said "$result->getMessage()"
				$this->_error("XML file could not be parsed: PEAR XML_Unserializer said '{$result->getMessage()}'", true);
				return false;
    		}else{
    			// load contents from xml file
    			$data = $unserialized->getUnserializedData();
    			return $data;
    		}
    	}else{
    		$this->_error("XML file could not be parsed because the PEAR XML_Unserializer library could not be found.", true);
    	}
	}
	
	function getControllerUrlRequest(){
	
		// determine the url:
		
		$url = reset(explode("?", $_SERVER["REQUEST_URI"]));
		
		if($url{0} == "/"){
			$url = substr($url, 1);
		}
		
		if($this->useOldTerms == true){
			$path_key = "application-path";
		}else{
			$path_key = "domain-path";
		}
		
		if(@strlen($this->xmlDataArray[$path_key]) > 1){
			
			$domain_path = $this->xmlDataArray[$path_key];
			$last_char = strlen($domain_path) - 1;
			
			if($domain_path{$last_char} != "/"){
				$domain_path .= "/";
				$this->domainPath = $domain_path;
			}else{
				$this->domainPath = $domain_path;
			}
			
			if(strpos($url, $domain_path) === 0){
				// $domain path
				$request = str_replace($domain_path, '', $url);
			}else{
				$request = $url;
			}
		}else{
			
			$request = $url;
			
		}
		
		// check for namespace
		if(preg_match('/^(([^:]+):)[^:]+$/', reset(explode("/", $request)), $matches)){
			$this->initialNamespace = $matches[2];
			$this->_log("The namespace \"{$this->initialNamespace}\" was detected in the URL request, and will be checked.");
			$request = substr($request, strlen($matches[1]));
		}
		
		if($request){
			$this->_log("The URL request was detected as \"$request\".");
		}else{
			$this->_log("The URL request is empty. This is the top level of the site or application.");
		}
		
		return $request;
		
	}
	
	function setDomain(){
		$protocol = isset($_SERVER['HTTPS']) ? "https://" : "http://";
		$this->domain = $protocol.$_SERVER["HTTP_HOST"]."/".$this->domainPath;
	}
	
	function getModuleDirectories(){
	
		if($this->useOldTerms == true){
			$modules_key = "pages";
		}else{
			$modules_key = "modules";
		}
	
		if($this->xmlDataArray[$modules_key]){
			$directories = explode(":", $this->xmlDataArray[$modules_key]);
			
			foreach($directories as $key=>$directory){
				
				$last_char = strlen($directory) - 1;
				
				if(strlen($directory) > 1){
					if($directory{$last_char} != "/"){
						$directories[$key] .= "/";
					}
				}
				
				if(!is_dir($directories[$key])){
					unset($directories[$key]);
				}
				
			}
			
			return array_values($directories);
			
		}else{
			// ERROR: No modules directories defined
			$this->_error("No modules directories defined");
			return array();
		}
	}
	
	function setNamespaces(){
		$this->_log("Checking namespace options...");
		
		// $this->initialNamespace;
		
		if(isset($this->xmlDataArray['namespace']) && is_array($this->xmlDataArray['namespace'])){
			
			if(isset($this->xmlDataArray['namespace']['name'])){
				$namespaces = array();
				$namespaces[0] = $this->xmlDataArray['namespace'];
			}else{
				$namespaces = $this->xmlDataArray['namespace'];
			}
		
			foreach($namespaces as $key=>$namespace){
			
				if(!isset($namespace['name'])){
					$this->_log("A &lt;namespace&gt; tag was found without the required &lt;name&gt; tag.");
					continue;
				}
			
				if(isset($namespace['default-namespace']) && ($namespace['default-namespace'] != false && strtolower($namespace['default-namespace']) != "false")){
					$this->defaultNamespace = $namespace;
				}
				
				if($this->initialNamespace && isset($namespace['name']) && $namespace['name'] == $this->initialNamespace){
					$this->namespace = $namespace['name'];
					$this->namespaceArray = $namespace;
					$this->_log("The namespace specified in the URL was matched to one in the XML file. The namespace was set as '{$this->namespace}'.");
				}
				
			}
			
			if(!$this->namespace){
				if($this->defaultNamespace){
					$this->namespace = $this->defaultNamespace['name'];
					$this->namespaceArray = $this->defaultNamespace;
					
					if($this->initialNamespace){
						$this->_log("The namespace specified in the URL '{$this->initialNamespace}' didn't match any of those in the XML file, so the default namespace, '{$this->namespace}' was assumed.");
					}else{
						$this->_log("No namespace was specified in the URL - not a problem - so the default namespace, '{$this->namespace}' was assumed.");
					}
					
				}else{
					$this->_log("No namespace was specified in the URL and no default was specified in the URL file, so namespaces are disabled for this request.");
				}
			}
			
		}else{
			if($this->initialNamespace){
				$this->_log("The namespace {$this->initialNamespace} was requested, but no namespaces were set in the Quince XML file...");
				$this->namespace = "";
			}else{
				$this->namespace = "";
			}
		}
		
		// print_r($this->namespaceArray);
		
		if(isset($this->namespaceArray['mode'])){
						
			$this->namespaceArray['_affect_domain'] = false;
			$this->namespaceArray['_affect_method'] = false;
			$this->namespaceArray['_affect_class'] = false;
			$this->namespaceArray['_affect_templates'] = false;
			
			// echo $namespace['mode']."<br />";
			
			if(preg_match('/^(NS_(NONE|DOMAIN|METHOD|CLASS|TEMPLATE|ALL))\s?\^\s?(NS_(NONE|DOMAIN|METHOD|CLASS|TEMPLATE|ALL))$/', $this->namespaceArray['mode'], $modes)){
				
				// echo "subtract<br />";
				$level = constant("self::".$modes['1']) - constant("self::".$modes['3']);
				// print_r($modes);
				// echo $level;
				
			}else if(preg_match('/^(NS_(NONE|DOMAIN|METHOD|CLASS|TEMPLATE|ALL)\|?)+$/', $this->namespaceArray['mode'], $modes)){
				
				$level = 0;
				
				// echo "add<br />";
				foreach(explode("|", $this->namespaceArray['mode']) as $constant_name){
					$level += constant("self::".$constant_name);
					// echo "adding ".constant("self::".$constant_name)."<br />";
				}
				
				// echo $level;
			}else{
				$level = 0;
			}
			
			// echo $level;
			
			switch($level){
				case 1:
				case 9:
					$this->namespaceArray['_affect_domain'] = true;
					break;
				case 2:
				case 10:
					$this->namespaceArray['_affect_method'] = true;
					break;
				case 3:
				case 11:
					$this->namespaceArray['_affect_domain'] = true;
					$this->namespaceArray['_affect_method'] = true;
					break;
				case 4:
				case 14:
					$this->namespaceArray['_affect_class'] = true;
					break;
				case 5:
				case 13:
					$this->namespaceArray['_affect_domain'] = true;
					$this->namespaceArray['_affect_class'] = true;
					break;
				case 6:
				case 14:
					$this->namespaceArray['_affect_method'] = true;
					$this->namespaceArray['_affect_class'] = true;
					break;
				case 7:
				case 15:
					$this->namespaceArray['_affect_domain'] = true;
					$this->namespaceArray['_affect_method'] = true;
					$this->namespaceArray['_affect_class'] = true;
					break;
			}
			
			if($level > 7){
				$this->namespaceArray['_affect_templates'] = true;
			}else{
				$this->namespaceArray['_affect_templates'] = false;
			}
			
			// print_r($this->namespaceArray);
			
		}else{
			$this->_log("The current namespace doesn't have the required &lt;mode&gt; tag, and so won't have any effect.");
		}
		
	}
	
	function setModules(){
		
		$this->_log("Retrieving modules...");
		
		if($this->useOldTerms == true){
			$module_key = "page";
		}else{
			$module_key = "module";
		}
		
		if(is_array($this->xmlDataArray[$module_key])){
			
			if(isset($this->xmlDataArray[$module_key]['name'])){
				$modules = array();
				$modules[0] = $this->xmlDataArray[$module_key];
			}else{
				$modules = $this->xmlDataArray[$module_key];
			}
			
			foreach($modules as $key=>&$module){
			
				$modules[$key]['class_file'] = "";
				$modules[$key]['class_file_found'] = false;
				
				if($this->namespaceArray['_affect_class'] && $this->namespaceArray['prefix']){
					$modules[$key]['class'] = $this->namespaceArray['prefix'].$module['class'];
				}
				
				$this->moduleNamesMap[$module['name']] = $key;
				$this->moduleIndicesMap[$key] = $module['name'];
				
				foreach($this->moduleDirectories as $directory){
					// echo $directory;
					if($modules[$key]['class_file_found'] != true){ // if the file hasn't already been found...
						
						// echo $modules[$key]['class']."<br />";
						
						// try one of the other module directories
						if(is_file($directory.$module['class'].$this->suffix)){
							
							$modules[$key]['class_file'] = $directory.$modules[$key]['class'].$this->suffix;
							$modules[$key]['class_file_found'] = true;
							$modules[$key]['has_own_directory'] = false;
							$modules[$key]['directory'] = $directory;
							
							if(isset($module['label'])){
							    $modules[$key]['label'] = $module['label'];
							}
							
							$this->_log("Found module \"{$module['name']}\".");
						
						}else if(is_file($directory.$module['class']."/".$modules[$key]['class'].$this->suffix)){
							
							$modules[$key]['class_file'] = $directory.$module['class']."/".$module['class'].$this->suffix;
							$modules[$key]['class_file_found'] = true;
							$modules[$key]['has_own_directory'] = true;
							$modules[$key]['directory'] = $directory.$module['class']."/";
							
							if(isset($module['label'])){
							    $modules[$key]['label'] = $module['label'];
							}
							
							if(is_file($modules[$key]['directory']."module.xml")){
								$modules[$key]['module_xml_file'] = $modules[$key]['directory']."module.xml";
							}
							
							$this->_log("Found module \"{$module['name']}\".");
							
						}else if(is_file($directory.$module['name']."/".$modules[$key]['class'].$this->suffix)){
							
							$modules[$key]['class_file'] = $directory.$module['name']."/".$modules[$key]['class'].$this->suffix;
							$modules[$key]['class_file_found'] = true;
							$modules[$key]['has_own_directory'] = true;
							$modules[$key]['directory'] = $directory.$module['name']."/";
							
							if(isset($module['label'])){
							    $modules[$key]['label'] = $module['label'];
							}
							
							if(is_file($modules[$key]['directory']."module.xml")){
								$modules[$key]['module_xml_file'] = $modules[$key]['directory']."module.xml";
							}
							
							$this->_log("Found module \"{$module['name']}\".");
							
						}else{
							$modules[$key]['has_own_directory'] = false;
						}
					}
				}
				
				if((isset($modules[$key]['default-module']) || isset($modules[$key]['default-page'])) && !isset($this->defaultModule)){
					$this->_log("The default module has been set as \"{$modules[$key]['name']}\".");
					$this->defaultModule = $modules[$key]['name'];
					$this->defaultModuleIndex = $key;
				}
				
				if(isset($modules[$key]['module_xml_file'])){
					if(md5_file($modules[$key]['module_xml_file']) != $_SESSION['moduleXmlHash'][$modules[$key]['name']]){
						// If the module xml file has changed
						$this->_log("Attempting to load Quince module XML file: ".$modules[$key]['module_xml_file']);
    					$option = array('complexType' => 'array', 'parseAttributes' => TRUE);
    					$unserialized = new XML_Unserializer($option);
    					$result = $unserialized->unserialize($modules[$key]['module_xml_file'], true);
    					$_SESSION['moduleXmlData'][$modules[$key]['name']] = $unserialized->getUnserializedData();
    					$_SESSION['moduleXmlHash'][$modules[$key]['name']] = md5_file($modules[$key]['module_xml_file']);
    					$data = $_SESSION['moduleXmlData'][$modules[$key]['name']];
    				}else{
    					// If the module xml file is the same
    					$this->_log($modules[$key]['module_xml_file']." has not changed since last pageload. Loading data from session.");
    					$data = $_SESSION['moduleXmlData'][$modules[$key]['name']];
    				}
    				
    				if(is_array($data['alias'])){
    				
    					if(isset($data['alias']['match'])){
    						$data['alias'][0] = $data['alias'];
    					}
    					
    					if(is_array($modules[$key]['alias'])){
    					
    						if(isset($modules[$key]['alias']['match'])){
    							$modules[$key]['alias'][0] = $modules[$key]['alias'];
    						}
    						
    						$modules[$key]['alias'] = array_merge($modules[$key]['alias'], $data['alias']);
    						
    					}
    				}
    				
    				if(is_array($data['form-forward'])){
    				
    					if(isset($data['form-forward']['method-name'])){
    						$data['form-forward'][0] = $data['form-forward'];
    					}
    					
    					if(is_array($modules[$key]['form-forward'])){
    					
    						if(isset($modules[$key]['form-forward']['method-name'])){
    							$modules[$key]['form-forward'][0] = $modules[$key]['form-forward'];
    						}
    						
    						$modules[$key]['form-forward'] = array_merge($modules[$key]['form-forward'], $data['form-forward']);
    						
    					}
    				}
    				
    				if(isset($data['label']) && strlen($data['label']) > 0){
    					$modules[$key]['label'] = $data['label'];
    				}
    				
    				if(isset($data['description']) && strlen($data['description']) > 0){
    					$modules[$key]['description'] = $data['description'];
    				}
    				
				}
				
				if(isset($modules[$key]['ajax']) && strtolower($modules[$key]['ajax']) == 'true'){
					$this->ajaxModules[$this->ajaxModulesIndex]['name'] = $modules[$key]['name'];
					$this->ajaxModules[$this->ajaxModulesIndex]['class'] = $modules[$key]['class'];
					$this->ajaxModules[$this->ajaxModulesIndex]['directory'] = $modules[$key]['directory'];
					$this->_log("The module \"{$modules[$key]['name']}\" was marked as an AJAX-enabled module.");
					$modules[$key]['ajax'] = true;
					$this->ajaxModulesIndex++;
				}else{
					$modules[$key]['ajax'] = false;
				}
				
			}
			
			// print_r($modules);
			return $modules;
			
		}else{
			// ERROR: No modules defined
			$this->_error("No modules defined", true);
			return array();
		}
	}
	
	function setAliases(){
	
		$this->_log("Retrieving aliases...");
		
		$aliases = array();
		$i = 0;
		
		foreach($this->modules as $moduleKey => $module){
			if(isset($module['alias']) && is_array($module['alias'])){
				if(isset($module['alias']['match'])){
					$aliases[$i] = $module['alias'];
					$aliases[$i]['module'] = $module['name'];
					$aliases[$i]['module_key'] = $moduleKey;
					$aliases[$i]['method'] = reset(explode("?", $module['alias']['_content']));
					$i++;
				}else{
					foreach($module['alias'] as $alias){
						$aliases[$i] = $alias;
						$aliases[$i]['module'] = $module['name'];
						$aliases[$i]['module_key'] = $moduleKey;
						$aliases[$i]['method'] = reset(explode("?", $alias['_content']));
						$i++;
					}
				}
			}
		}
		
		return $aliases;
		
	}
	
	function getFormForwards(){
	
		$this->_log("Retrieving form forwards...");
		
		$formForwards = array();
		$i = 0;
		
		foreach($this->modules as $moduleKey => $module){
			if(isset($module['form-forward']) && is_array($module['form-forward'])){
				if(isset($module['form-forward']['method-name'])){
					$formForwards[$i] = $module['form-forward'];
					$formForwards[$i]['module'] = $module['name'];
					$formForwards[$i]['module_key'] = $moduleKey;
					$i++;
				}else{
					foreach($module['form-forward'] as $formForward){
						$formForwards[$i] = $formForward;
						$formForwards[$i]['module'] = $module['name'];
						$formForwards[$i]['module_key'] = $moduleKey;
						$i++;
					}
				}
			}
		}
		
		return $formForwards;
	}
	
	function setModule(){
		
		if(strlen($this->request) > 0){
		
			// check aliases first
			foreach($this->aliases as $alias){
			
				if(preg_match($this->getUrlRegExp($alias['match']), $this->request)){
					if($this->modules[$alias['module_key']]['class_file_found'] == true){
						$this->moduleName = $alias['module'];
						$this->sectionName =& $this->moduleName; // deprecated - for backwards compatibility
						$this->moduleIndex = $alias['module_key'];
						$this->aliasMatch = $alias['match'];
						$this->aliasDestination = $alias['_content'];
						$this->requestIsUsingAlias = true;
						// return;
					}else{
						// the actual file containing the class was not found
						$this->moduleName = $this->defaultModule;
						$this->sectionName =& $this->moduleName; // deprecated - for backwards compatibility
						$this->moduleIndex = $this->defaultModuleIndex;
						$this->aliasMatch = $alias['match'];
						$this->aliasDestination = $alias['_content'];
						$this->requestIsUsingAlias = true;
						$this->_log("Request matched alias to existing module, but file {$this->modules[$alias['module_key']]['class_file']} was not found. Loading default module.");
						// return;
					}
				}
			}
		
			// an alias is not being used
			
			if($this->dotSyntaxEnabled == true){
				$regexp = '/^([\w_]+)([\/\.]([\w\._]+))?/i';
			}else{
				$regexp = '/^([\w\._]+)([\/]([\w\._]+))?/i';
			}
			
			if($matched = preg_match($regexp, strtolower($this->request), $matches)){

				foreach($this->modules as $key=>$module){
					
					if($matches[1] == strtolower($module['name'])){
						if($this->modules[$key]['class_file_found'] == true){
							$this->moduleName = $module['name'];
							$this->sectionName =& $this->moduleName; // deprecated - for backwards compatibility
							$this->moduleIndex = $key;
							// return;
						}else{
							$this->moduleName = $this->defaultModule;
							$this->sectionName =& $this->moduleName; // deprecated - for backwards compatibility
							$this->moduleIndex = $this->defaultModuleIndex;
							$this->_log("Request matched alias to existing module, but file {$this->modules[$this->moduleIndex]['class_file']} was not found. Loading default module.");
							// return;
						}
					}
				}
				
				if(!$this->moduleName){
					
					$this->_log("The URL request was not recognised. Falling back on to the default module.");
					$this->moduleName = $this->defaultModule;
					$this->sectionName =& $this->moduleName;
					$this->moduleIndex = $this->defaultModuleIndex;
					// return;
				}
				
			}
		
			
		
		}else{
			
			$this->_log("Request not recognised. Falling back on to the default module.");
			$this->moduleName = $this->defaultModule;
			$this->sectionName =& $this->moduleName;
			$this->moduleIndex = $this->defaultModuleIndex;
			// return;
	
		}
		
		$this->_log("The module has been set as \"{$this->moduleName}\".");
		
	}
	
	function setTemplate(){
	
		// echo $this->moduleIndex;
		
		if(isset($this->moduleIndex)){
			$this->templateName = $this->modules[$this->moduleIndex]['template'];
			$this->_log("The template set has been set as \"{$this->templateName}\".");
			
			if($this->namespaceArray['_affect_templates'] && $this->namespaceArray['prefix']){
				$this->templateName = $this->namespaceArray['prefix'].$this->templateName;
				$this->_log("The template set has been modified by the namespace to \"{$this->templateName}\".");
			}
		}
	}
	
	function setClass(){
		if(isset($this->moduleIndex)){
			$this->className = $this->modules[$this->moduleIndex]['class'];
			$this->_log("The class has been set as \"{$this->className}\" ({$this->modules[$this->moduleIndex]['class_file']}).");
			
			if($this->namespaceArray['_affect_class'] && $this->namespaceArray['prefix']){
				// $this->className = $this->namespaceArray['prefix'].$this->className;
			}
			
		}
	}
	
	function setMethod(){
		
		if($this->requestIsUsingAlias == true){
			
			$this->_log("Request has been recognised as an alias.");
			$this->_log("Attempting to determine which method should be called...");
			
			if(isset($this->modules[$this->moduleIndex]['alias']['match'])){
				$aliases[0] = $this->modules[$this->moduleIndex]['alias'];
			}else{
				
				if(isset($this->modules[$this->moduleIndex]['alias'])){
					$aliases = $this->modules[$this->moduleIndex]['alias'];
				}
				
				if(!isset($aliases) || !is_array($aliases)){
					$aliases = array();
				}
			}
			
			foreach($aliases as $alias){
				
				if(preg_match($this->getUrlRegExp($alias['match']), $this->request)){
					$aliasContent = $alias['_content'];
					break;
				}
			
			}
			
			preg_match('/^([\w_]+)/i', $aliasContent, $matches);
			$method = $matches[1];
			
			$this->_log("This URL alias is mapped to a method called $method().");
			
			if($this->namespaceArray['_affect_method'] && isset($this->namespaceArray['prefix']) && strlen($this->namespaceArray['prefix'])){
				$method = $this->namespaceArray['prefix'].$method;
				$this->_log("The method prefix specified in the current namespace has modified the method to be $method().");
			}
			
			$default_method = $this->modules[$this->moduleIndex]['default-method'];
			
		}else{
			
			$this->_log("The URL request does not match any of the aliases for this module.");
			$this->_log("Attempting to determine which method should be called...");
			
			if($this->dotSyntaxEnabled == true){
				$regexp = '/^([\w_]{2,})[\/\.]([\w_]+)/i';
			}else{
				$regexp = '/^([\w_]{2,})\/([\w_]+)/i';
			}
			
			preg_match($regexp, $this->request, $matches);
			
			$default_method = $this->modules[$this->moduleIndex]['default-method'];
			
			if(isset($matches[2])){
				$method = $matches[2];
				if($this->checkClassForMethod){
					$this->_log("The method has been recognised as ".$matches[2]."(), but may not be implemented.");
				}
			}else{
				$this->_log("The method has not been specified. The default method for this module is $default_method().");
			}
			
			if($this->namespaceArray['_affect_method'] && isset($this->namespaceArray['prefix']) && strlen($this->namespaceArray['prefix'])){
				$method = $this->namespaceArray['prefix'].$method;
				$this->_log("The method prefix specified in the current namespace has modified the method to be $method().");
			}
			
		}
		
		// If the checking of classes is switched on... (it is by default)
		if($this->checkClassForMethod){
		
			// make sure the file exists
			if(is_file($this->modules[$this->moduleIndex]['class_file'])){
			
				$this->_log("Checking file \"".$this->modules[$this->moduleIndex]['class_file']."\"");
				
				if(@include_once $this->modules[$this->moduleIndex]['class_file']){
					if(class_exists($this->modules[$this->moduleIndex]['class'])){
				
						$this->_log("The class \"".$this->modules[$this->moduleIndex]['class']."\" was found.");
					
						$available_methods = get_class_methods($this->className);
					
						if(in_array(@$method, $available_methods)){
							$this->_log("The method has been set as $method().");
							$this->methodName = $method;
						}else{
							if(in_array($default_method, $available_methods)){

								if(isset($method)){
									$this->_log("The method $method() is not implemented, but the default method, $default_method(), is.");
								}else{
									$this->_log("The default method, $default_method(), is implemented in this class.");
								}

								$this->methodName = $default_method;
								$this->_log("The method has been set as ".$this->methodName."().");
							}else{
								// ERROR: requested method not found. default method not implemented.
								$this->_error("The requested method was not found. Tried to load the default (".$default_method.") method but it wasn't implemented either.", true);
							}
						}
					}else{
						$this->_error("The class does not exist.", true);
					}
				}else{
					// ERROR: could not load class file: $this->modules[$this->moduleIndex]['class_file']
					$this->_error("Could not load class file: {$this->modules[$this->moduleIndex]['class_file']}", true);
				}
			}
		
		}else{
			$this->methodName = $method;
			$this->_log("Not bothering to check class file \"{$this->modules[$this->moduleIndex]['class_file']}\" for method.");
			$this->_log("The method has been set as ".$this->methodName."().");
		}
	}
	
	function addProperty($name, $object){
		if(is_object($this->user_object)){
			$this->user_object->$name = $object;
		}else{
			$this->object_stack[$name] = $object;
		}
	}
	
	function performAction(){
		
		if($this->readyToPerformAction){
		
			if(@include_once $this->modules[$this->moduleIndex]['class_file']){
				
				$this->getVariables = $this->getGetVariables();
				
				//if($destination = $this->requestIsForward()){
					// do some forwarding
					
				//}else{
					
				$args = array("get" => $this->getVariables, "post"=> $_POST, "cookie" => $_COOKIE, "namespace"=> $this->namespace );
					
				$this->prepareTime = microtime(true);
				$this->prepareTimeTaken = number_format(($this->prepareTime - $this->startTime)*1000, 2, ".", ",");
				
				if(!is_object($this->user_object)){
				    $this->user_object = new $this->className;
			    }
			    
				// echo get_class($this->user_object);
			    $this->user_object->controller =& $this;
			        
			    if(count($this->object_stack)){
			    	foreach($this->object_stack as $name => $value){
			    		$this->user_object->$name = $value;
						// echo '$this->'.$name.' = '.print_r($value, true).'<br />';
			    	}
			    }
			        
			    // echo $this->methodName;
					
				// LOG: Calling $this->className::$this->methodName();
				$this->_log('Calling user action: '.$this->className.'::'.$this->methodName.'()');
				// var_dump($this->methodName);
				$this->result = call_user_func_array(array(&$this->user_object, $this->methodName), $args);
					
				$this->postActionTime = microtime(true);
				$this->postActionTimeTaken = number_format(($this->postActionTime - $this->startTime)*1000, 2, ".", ",");
					
				if($destination = $this->requestIsForward()){
					// handle form forwards
					if($this->result == Quince::FAIL){
						// action failed
						$destination = $this->getFormForwardDestination($destination);
						header("location:".$this->domain.$destination);
						exit;
					}else{
						// action succeeded
						$destination = $this->getFormForwardDestination($destination);
						header("location:".$this->domain.$destination);
						exit;
					}
				}
				//}
			}else{
				// ERROR: could not load class file: $this->modules[$this->moduleIndex]['class_file'];
				$this->_error("Could not load class file: {$this->modules[$this->moduleIndex]['class_file']}");
			}
		}else{
			if($this->options['auto']){
				$this->_error("Quince wasn't ready to go ahead with the action.", true);
			}else{
				$this->_log("Quince wasn't ready to go ahead with the action. Please call Quince::dispatch() first.");
			}
		}
	}
	
	function requestIsForward(){
		// print_r($this->formForwards);
		
		foreach($this->formForwards as $formForward){
			
			if($this->moduleName == $formForward['module'] && $this->methodName == $formForward['method-name']){
				if($this->activeRequestArrayName == $formForward['method-type']){
					return $formForward['_content'];
				}else{
					// ERROR: form forwarding using wrong request type
					$this->_log("Form forwarding using wrong request type. Request is {$this->activeRequestArrayName} but should be {$formForward['method-type']}.");
					return $formForward['_content'];
				}
			}
		}
		
		// Add some code to check for ordinary forwarding here, once it is implemented.
		
		return false;
	}
	
	function getFormForwardDestination($destination){
		
		// print_r($this->activeRequestArray);
		
		foreach($this->activeRequestArray as $key => $value){
			if(!is_array($value)){
				$destination = str_replace('$'.$key, $value, $destination);
			}
		}
		
		// var_dump($destination);
		// var_dump($value);
		// var_dump($key);
		
		// delete undefined variables
		$destination = preg_replace('/\$[\w_]+/i', '', $destination);
		return $destination;
	}
	
	// deprecated
	function getDomainName(){
		// LOG: "Deprecated Function Used: getDomainName() ";
		$this->_log("Deprecated Function Used: getDomainName(). Use getDomain()");
		return $this->getDomain();
	}
	
	function getDomain(){
		if($this->namespaceArray['_affect_domain']){
			return $this->domain.$this->namespace.":";
		}else{
			return $this->domain;
		}
	}
	
	function getTemplateName(){
		return $this->templateName;
	}
	
	function getGetVariables(){
		
		if(!$this->getVariables){
		
			$variables = array();
		
			if($this->requestIsUsingAlias == true){
			
				preg_match_all('/[:|\$]([\w_]+)/i', $this->aliasMatch, $vars, PREG_SET_ORDER);
				preg_match_all('/([\w_]+)=\$[\w_]+/i', $this->aliasDestination, $varnames, PREG_SET_ORDER);
			
				$alias_regexp = $this->getUrlRegExp($this->aliasMatch);
			
				preg_match($alias_regexp, $this->request, $values);
			
				$i = 0;
			
				foreach($vars as $variable){
					$variables[$varnames[$i][1]] = $values[$i+1];
					$this->_log("Added variable to GET array from dynamic alias: \${$varnames[$i][1]} recognised with value of '{$values[$i+1]}'");
					$i++;
				}
			
			}
			
			$getVars = array_merge($_GET, $variables);
			
			return $getVars;
		
		}else{
		
			return $this->getVariables;
		
		}
	}
	
	function getPostVariables(){
		// TODO: Make this filter the post vars
		return $_POST;
	}
	
	function getRequestVariables(){
		return array_merge($this->getGetVariables(), $this->getPostVariables());
	}
	
	function send($name, $value){
		
		if(is_array($this->result) && !isset($this->result[$name])){
			$this->result[$name] = $value;
		}
		
		if($this->contentRetrieved){
			$this->_log("Trying to amend result after it has already been retrieved. This probably won't have any effect.");
		}
	}
	
	function getUrlFor($moduleName, $method='', $args=''){
			
		if(is_array($this->modules[$this->moduleNamesMap[$moduleName]])){
	
			if(!$method){
				$method = $this->modules[$this->moduleNamesMap[$moduleName]]['default-method'];
			}
		
			if(defined('QUINCE_USER_URL_'.strtoupper($moduleName).'_'.strtoupper($method))){
			
				// do some stuff here to get query string
			
				return constant('QUINCE_USER_URL_'.strtoupper($moduleName).'_'.strtoupper($method));
			
			}else{
		
				$separator = $this->dotSyntaxEnabled ? "." : "/";
				$foundAlias = false;
				
				// look to see if an alias exists in the specified module for the specified action
				foreach($this->aliases as $alias){
					if(strtolower($alias['module']) == strtolower($moduleName) && strtolower($alias['method']) == strtolower($method)){
						$path = $this->getDomain().$alias['match'];
						$foundAlias = true;
						break;
					}
				}
			
				if($foundAlias){
					// if not, return the default configuration
				
					$hasUrlVars = preg_match_all('/(:|\$)([\w_]+)/', $path, $vars);
					
					if($hasUrlVars){
						
						foreach($vars[2] as $key=>$varname){
							if(isset($args[$varname])){
								// echo "replace ".$vars[1][$key].$varname." with ".$args[$varname];
								$path = str_replace($vars[1][$key].$varname, $args[$varname], $path);
							}else{
								$this->_error("getUrlFor() - required URL parameter \"$varname\" not supplied.");
								$path = str_replace($vars[1][$key].$varname, '', $path);
							}
						}
					}
					
					$getVars = array();
					
					if(is_array($args)){
						
						if($hasUrlVars){
							foreach($args as $key=>$value){
								if(!in_array($key, $vars[2])){
									$getVars[$key] = $value;
								}
							}
						}
						
						$qs = count($getVars) ? "?".$this->getQueryString($getVars) : '';
						
					}else{
					
						$qs = '';
						
					}
					
					// if the url itself doesn't have any dynamic parts, save it as a constant for quicker retrieval next time
					if(!$hasUrlVars){
						define('QUINCE_USER_URL_'.strtoupper($moduleName).'_'.strtoupper($method), $path);
					}
					
					return $path.$qs;
				
				}else{
				
					if(is_array($args)){
						$qs = "?".$this->getQueryString($args);
					}else{
						$qs = "";
					}
			
					$path = $this->getDomain().$this->getModuleName().$separator.$this->getMethodName();
					define('QUINCE_USER_URL_'.strtoupper($moduleName).'_'.strtoupper($method), $path);
					
					return $path.$qs;
				}
			
			}
		
		}else{
			$this->_log("Quince::getUrlFor() - the specified module \"$moduleName\" doesn't exist.");
		}
	}
	
	function getMethodName(){
		return $this->methodName;
	}
	
	function getClassName(){
		return $this->className;
	}
	
	function getClassFilePath(){
		return $this->modules[$this->moduleIndex]['class_file'];
	}
	
	// deprecated
	function getSectionName(){
		// LOG: "Deprecated Function Used: getSectionName() ";
		$this->_log("Deprecated Function Used: getSectionName(). Use getModuleName()");
		return $this->getModuleName();
	}
	
	function getModuleName(){
		return $this->moduleName;
	}
	
	function getNamespace(){
		return $this->namespace;
	}
	
	function getModuleDirectory(){
		if(isset($this->moduleIndex)){
			return $this->modules[$this->moduleIndex]['directory'];
		}
	}
	
	function isPrivilegedUser(){
		$this->_log("Deprecated Function Used: isPrivilegedUser()");
	}
	
	function getQueryString(array $args){
		
		$string = '';
		$i = 0;
		
		foreach($args as $key=>$value){
			
			if($i>0){
				$string .= '&';
			}
			
			$string .= $key.'='.$value;
		}
		
		return $string;
	}
	
	function getModules(){
		return $this->modules;
	}
	
	function getModuleNames(){
		$names = array();
		foreach($this->modules as $module){
			$names[] = $module['name'];
		}
		return $names;
	}

	function getAjaxModules(){
		return $this->ajaxModules;
	}
	
	function getRequest(){
		return $this->request;
	}
	
	// deprecated
	function getAlias(){
		$this->_log("Deprecated Function Used: getAlias(). Use getRequest()");
		if($this->requestIsUsingAlias == true){
			return $this->request;
		}
	}
	
	function getContent(){
		if($this->result){
			$this->_log("Returning result of {$this->className}::{$this->methodName}()");
			$this->contentRetrieved = true;
			return $this->_stripSlashesFromArray($this->result);
		}else{
			$this->_log("You have to execute the action with Quince::performAction() before you can get any content, silly.");
			return null;
		}
	}
	
	function getDebugContent($type = 100){
	
		$events = array();
		
		switch($type){
			case 100:
			if(is_array($this->errors)){
				$all_events = array_merge($this->errors, $this->log);
			}else{
				$all_events = $this->log;
			}
			break;
			
			case 101:
			$all_events = $this->log;
			break;
			
			case 102:
			if(is_array($this->errors)){
				$all_events = $this->errors;
			}else{
				$all_events = array();
			}
			break;
		}
		
		ksort($all_events);
		$i = 0;
		
		foreach($all_events as $key=>$message){
			
			if($i == 0){
				$start_time = $key;
			}
			
			$time = ($key - $start_time)/100;
			
			$events[$i]['time'] = number_format($time, 2)." ms";
			$events[$i]['message'] = $message;
			
			$i++;
		}
		
		return $events;
	}
	
	function getIsAlias(){
		return $this->requestIsUsingAlias;
	}
	
	function getNavigationState(){
		$this->_log("Deprecated Function Used: getNavigationState()");
		return $this->navigationState;
	}
	
	function getMetaData(){
		$this->_log("Deprecated Function Used: getMetaData()");
		return $this->metaData;
	}
	
	function setDebugLevel($level=0){
		$this->_log("Deprecated Function Used: setDebugLevel()");
	}
	
	function setCache(){
		$this->_log("Deprecated Function Used: setCache()");
	}
	
	function enableXmlEditor(){
		$this->_log("Deprecated Function Used: enableXmlEditor()");
	}
	
	function _purge(){
		$_SESSION["xmlDataArray"] = array();
	}
	
	function _debug($type = 100){
		// print_r($this->getDebugContent());
		foreach($this->getDebugContent($type) as $event){
			echo '<div style="float:left;width:100%;background-color:#fff;color:#111;border-bottom:1px solid #ddd">'.$event['time']." - ".$event['message']."</div>";
		}
	}
	
	function _log($message){
		$time = number_format(microtime(true)*100000, 0, ".", "");
		$this->log[$time] = "Controller: ".$message;
		// echo $message."<br />";
	}
	
	function _error($message, $halt = false){
		$time = number_format(microtime(true)*100000, 0, ".", "");
		$this->errors[$time] = $message;
		// echo $message."<br />";
		if($halt == true){
			$this->_log("Fatal error reported. Unable to continue. Tell my wife I...");
			$this->halt = true;
		}
	}
	
	function getUrlRegExp($url){
		
		// escape special characters (/\|[]{}^.)
		$regexp = str_replace('/', '\/', $url);
		$regexp = str_replace('|', '\|', $regexp);
		$regexp = str_replace('[', '\[', $regexp);
		$regexp = str_replace(']', '\]', $regexp);
		$regexp = str_replace('{', '\{', $regexp);
		$regexp = str_replace('}', '\}', $regexp);
		$regexp = str_replace('.', '\.', $regexp);
		
		// replace every $variable with "([^\/\s]+)"
		$regexp = preg_replace('/\$[\w_-]+/', '([^\/\s\.]+)', $regexp);
		$regexp = preg_replace('/:[\w_-]+/', '(\d+)', $regexp);
		
		return "/^".$regexp."\/?$/i";
	}
	
	function fileGetContents($file_name){
		$fh = fopen($file_name, 'r', true);
		$contents = fread($fh, filesize($file_name));
		fclose($fh);
		return $contents;
	}
	
	function filePutContents($file_name, $data){
		if(!$fh = fopen($file_name, 'w', true)){
			return false;
		}else{
			if(fwrite($fh, $data) === FALSE){
				return false;
			}else{
				fclose($fh);
				return true;
			}
		}
	}
	
	// in PHP5 this would be a private function
	function loadFromDiskCache($data_name){
		if(file_exists($this->cache_dir.$data_name.'.tmp')){
			if($contents = $this->fileGetContents($this->cache_dir.$data_name.'.tmp')){
				$this->_log("Found and loaded data in disk cache: ".$this->cache_dir.$data_name.'.tmp');
				$data = unserialize($contents);
				return $data;
			}else{
				return false;
			}
		}
	}
	
	// so would this
	function saveToDiskCache($data_name, $data){
		if(strlen($data_name)){
			if($this->filePutContents($this->cache_dir.$data_name.'.tmp', serialize($data))){
				$this->_log("Successfully wrote data to disk: ".$this->cache_dir.$data_name.'.tmp');
			}else{
				$this->_log("Writing data to disk failed.");
			}
		}
	}
	
	// this would be public
	function setCacheDirectory($new_directory){
		if(strlen($new_directory)){
			$this->cache_dir = $new_directory;
		}
	}
	
	function _execTime(){
		$microTime = microtime(); 
		$microTime = explode(" ",$microTime); 
		$microTime = $microTime[1] + $microTime[0]; 
		return $microTime;
	}
	
	function _stripSlashesFromArray($value){
		return is_array($value) ? array_map(array('Quince','_stripSlashesFromArray'), $value) : utf8_encode(stripslashes($value));
	}
	
	function _redirect($url){
		header('Location: '.$url);
		exit;
	}
}








class QuinceException extends Exception{

	public function __construct($message, $code = 0){
        parent::__construct($message, $code);
    }

}



interface QuinceBase{

	function send($data, $name="");
	function redirect($destination="");
	function _error($message, $type='');
	
}







require('Smarty.class.php');

class SmartestEngine extends Smarty{

	protected $controller;
	protected $section;
	protected $method;
	protected $domain;
	protected $get;
	protected $templateHelper;
	protected $page;
	protected $_page_rendering_data = array();
	protected $draft_mode = false;
	
	public function __construct(){
	
		parent::Smarty();
		// global $site;
		
		$this->controller = SmartestPersistentObject::get('controller');
		$this->section = $this->controller->getModuleName();
		$this->method  = $this->controller->getMethodName();
		$this->domain  = $this->controller->getDomain();
		$this->get     = $this->controller->getRequestVariables();
		
		$this->templateHelper = new SmartestTemplateHelper;
		$this->plugins_dir[] = SM_ROOT_DIR."System/Templating/Plugins/";
		$this->compiler_file = SM_ROOT_DIR."System/Templating/SmartestEngineCompiler.class.php";
        $this->compiler_class = "SmartestEngineCompiler";
    	
    	// it would be nice to get away from curly brackets, but probably too late now:
    	// $this->left_delimiter = '<%';
		// $this->right_delimiter = '%>';
		
	}
	
	public function getPage(){
        return $this->page;
    }
    
    public function getDraftMode(){
        return $this->draft_mode;
    }
	
    public function renderPage($page, $draft_mode=false){
	    
	    $this->page = $page;
	    $this->draft_mode = $draft_mode;
	    $this->_page_rendering_data = $this->page->fetchRenderingData($draft_mode);
	    $this->_tpl_vars['this'] = $this->_page_rendering_data;
	    
	    // print_r($page);
	    
	    if($draft_mode){
	        $template = SM_ROOT_DIR."Presentation/Masters/".$page->getDraftTemplate();
	    }else{
	        $template = SM_ROOT_DIR."Presentation/Masters/".$page->getLiveTemplate();
	    }
	    
	    if(!file_exists($template)){
	        $template = SM_ROOT_DIR.'System/Presentation/Error/_websiteTemplateNotFound.tpl';
	    }
	    
	    $this->_smarty_include(array('smarty_include_tpl_file'=>$template, 'smarty_include_vars'=>array()));
	}
    
    public function renderContainer($container_name, $params, $parent){
        
        $container = new SmartestContainerDefinition;
        
        if($container->load($container_name, $this->getPage(), $this->draft_mode)){
            // var_dump($container->getTemplateFilePath());
            
            if($container->getTemplateFilePath()){
                $this->_smarty_include(array('smarty_include_tpl_file'=>$container->getTemplateFilePath(), 'smarty_include_vars'=>array()));
            }
            
            if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
			    
			    $edit_link = '';
			    
			    if(is_object($container->getTemplate())){
			        // $edit_link .= "<a title=\"Click to edit template: ".$container->getTemplate()->getUrl()."\" href=\"".SM_CONTROLLER_DOMAIN."templates/editTemplate?template_id=".$container->getTemplate()->getId()."&amp;type=SM_CONTAINER_TEMPLATE&amp;from=pagePreview\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/pencil.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Edit this template--></a>";
			    }
			    
			    // $edit_link .= "<a title=\"Click to edit definition for container: ".$container_name."\" href=\"".SM_CONTROLLER_DOMAIN."websitemanager/defineContainer?assetclass_id=".$container_name."&amp;page_id=".$this->page->getWebid()."&amp;from=pagePreview\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this asset--></a>";
			    
		    }else{
			    $edit_link = "<!--edit link-->";
		    }
		    
		    return $edit_link;
            
        }
        
    }
    
    public function renderPlaceholder($placeholder_name, $params, $parent){
        
        $placeholder = new SmartestPlaceholderDefinition;
        $asset_types = SmartestDataUtility::getAssetTypes();
        // print_r($asset_types);
        
        if($asset_id = $placeholder->load($placeholder_name, $this->getPage(), $this->draft_mode)){
            // return $placeholder->getMarkup();
            
            if(array_key_exists($placeholder->getType(), $asset_types)){
	            $type_info = $asset_types[$placeholder->getPlaceholder()->getType()];
	        }else{
	            // some sort of error? unsupported type
	            return "Error: unsupported type";
	        }
	        
	        // print_r($type_info['editable']);
            
            if($this->draft_mode){
                $rd = $placeholder->getDraftRenderData();
            }else{
                $rd = $placeholder->getLiveRenderData();
            }
            
            if($data = @unserialize($rd)){
                $render_data = $data;
            }else if($data = $placeholder->getDefaultAssetRenderData($this->draft_mode)){
                $render_data = $data;
            }else{
                $render_data = array();
            }
            
            $html = $this->renderAsset(array('id'=>$asset_id, 'render_data'=>$render_data));
            
            if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
			    $edit_link = "<a title=\"Click to edit definition for placeholder: ".$placeholder->getPlaceholder()->getLabel()." (".$placeholder->getPlaceholder()->getType().")\" href=\"".SM_CONTROLLER_DOMAIN."websitemanager/definePlaceholder?assetclass_id=".$placeholder->getPlaceholder()->getName()."&amp;page_id=".$this->page->getWebid()."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this file--></a>";

			    /* if(isset($type_info['editable']) && $type_info['editable'] && $type_info['editable'] != 'false'){
			        $edit_link .= "<a title=\"Click to edit placeholder: ".$placeholder->getPlaceholder()->getLabel()." (".$placeholder->getPlaceholder()->getType().")\" href=\"".SM_CONTROLLER_DOMAIN."assets/editAsset?asset_id=".$asset_id."&amp;from=pagePreview\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/pencil.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this asset--></a>";
			    } */

		    }else{
			    $edit_link = "<!--edit link-->";
		    }
            
            return $html.$edit_link;
            
        }else{
            
            if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
            
                $ph = new SmartestPlaceholder;
            
                if($ph->hydrateBy('name', $placeholder_name)){
                    $edit_link = "<a title=\"Click to edit definition for placeholder: ".$ph->getLabel()." (".$ph->getType().")\" href=\"".SM_CONTROLLER_DOMAIN."websitemanager/definePlaceholder?assetclass_id=".$ph->getName()."&amp;page_id=".$this->page->getWebid()."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this file--></a>";
                    return $edit_link;
                }
            
            }
            
        }
        
    }
    
    public function renderField($field_name, $params){
        
        if(is_array($this->_page_rendering_data) && is_array($this->_page_rendering_data['fields'])){
            $value = $this->_page_rendering_data['fields'][$field_name];
            
            if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
			    $edit_link = "<a title=\"Click to edit definitions for field: ".$field_name."\" href=\"".SM_CONTROLLER_DOMAIN."metadata/defineFieldOnPage?page_id=".$this->getPage()->getWebid()."&amp;assetclass_id=".$field_name."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /></a>";
		    }else{
			    $edit_link = "";
		    }
        
            $value .= $edit_link;
            return $value;
            
        }else{
            return null;
        }
        
    }
    
    public function renderList($list_name, $params){
        
        $list = new SmartestCmsItemList;
        
        if($list->load($list_name, $this->getPage(), $this->draft_mode)){
            /* if($list->getTemplateFilePath()){
                $this->_smarty_include(array('smarty_include_tpl_file'=>$container->getTemplateFilePath(), 'smarty_include_vars'=>array()));
            } */
            
            if($list->hasRepeatingTemplate($this->draft_mode)){
            
                if($list->hasHeaderTemplate($this->draft_mode)){
                    $this->_smarty_include(array('smarty_include_tpl_file'=>$list->getHeaderTemplate($this->draft_mode), 'smarty_include_vars'=>array()));
                    // echo $list->getHeaderTemplate($this->draft_mode);
                }
            
                $data = $list->getItemsAsArrays($this->draft_mode);
                
                foreach($data as $item){
                    // print_r($item);
                    $this->_tpl_vars['item'] = $item;
                    $this->_smarty_include(array('smarty_include_tpl_file'=>$list->getRepeatingTemplate($this->draft_mode), 'smarty_include_vars'=>array()));
                    // echo $list->getRepeatingTemplate($this->draft_mode);
                }
                
                foreach($data as $item){
                    
                    if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
    				    $edit_link = "<a title=\"Click to edit ".$item['_model']['name'].": ".$item['name']."\" href=\"".SM_CONTROLLER_DOMAIN."datamanager/editItem?item_id=".$item['id']."&amp;from=pagePreview\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Edit this item--></a>";
    			    }else{
    				    $edit_link = "<!--edit link-->";
    			    }
    			    
    			    echo $edit_link;
                }
            
                if($list->hasFooterTemplate($this->draft_mode)){
                    $this->_smarty_include(array('smarty_include_tpl_file'=>$list->getFooterTemplate($this->draft_mode), 'smarty_include_vars'=>array()));
                    // echo $list->getFooterTemplate($this->draft_mode);
                }
                
                if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				    $edit_link = "<a title=\"Click to edit definitions for embedded list: ".$list->getLabel()."\" href=\"".SM_CONTROLLER_DOMAIN."websitemanager/defineList?assetclass_id=".$list->getName()."&amp;page_id=".$this->getPage()->getWebid()."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Edit this list--></a>";
			    }else{
				    $edit_link = "<!--edit link-->";
			    }
            
                echo $edit_link;
            
            }
            
        }
    
    }
    
    public function renderLink($to, $params){
        
        if(strlen($to)){
            
            $preview_mode = (SM_CONTROLLER_METHOD == "renderEditableDraftPage") ? true : false;
            
            $link_helper = new SmartestCmsLinkHelper($this->getPage(), $params, $this->draft_mode, $preview_mode);
            $link_helper->parse($to);
            
            return $link_helper->getMarkup();
            /* }else{
                if($this->draft_mode){
                    return  $link_helper->getErrorMessage();
                }
            } */
        
        }
        
    }
    
    public function renderUrl($to, $params){
        
        // used by the tinymce url helper
        
        if(strlen($to)){
            
            $preview_mode = (SM_CONTROLLER_METHOD == "renderEditableDraftPage") ? true : false;
            
            $link_helper = new SmartestCmsLinkHelper($this->getPage(), $params, $this->draft_mode, $preview_mode);
            $link_helper->parse($to);
            
            return $link_helper->getUrl();
        
        }
        
    }
    
    public function getRepeatBlockData($params){
        
        if(count(explode(':', $params['from'])) > 1){
            $parts = explode(':', $params['from']);
            $type = $parts[0];
            $name = $parts[1];
        }else{
            $type = 'set';
            $name = $params['from'];
        }
        
        switch($type){
            case "tag":
                
                if(count(explode(';', $params['from'])) > 1){
                    $sub_type_def = end(explode(';', $params['from']));
                    $sub_type = substr($params['from'], 0, 5);
                }else{
                    $sub_type = 'page';
                }
                
                break;
                
            default:
                
                $set = new SmartestCmsItemSet;

        		if($set->hydrateBy('name', $name)){
        		    $items = $set->getMembers($this->draft_mode);
        		}else{
        		    $items = array();
        		}

         		return $items;
         		
                break;
        }
        
		// $items = $this->templateHelper->getItemDetails($set_name);
		
		
 		
    }
    
    public function renderAsset($params){
       
        // print_r($params);
       
        if((isset($params['id']) && is_numeric($params['id'])) || (isset($params['name']) && strlen($params['name']))){
            // retrieve asset by primary key
            // return $params['id'];

            $asset = new SmartestAsset;

            if($asset->hydrate($params['id']) || $asset->hydrateBy('stringid', $params['name'])){
                
                $asset_type_info = $asset->getTypeInfo();
                $render_template = SM_ROOT_DIR.$asset_type_info['render']['template'];
                
                if(file_exists($render_template)){
                    
                    $this->_smarty_include(array('smarty_include_tpl_file'=>$render_template, 'smarty_include_vars'=>array('asset_info'=>$asset->__toArray(), 'render_data'=>@$params['render_data'])));
                    
                    if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
        			    
        			    // echo 'asset';
        			    // echo $asset_type_info['editable'];
        			    
        			    if(isset($asset_type_info['editable']) && $asset_type_info['editable'] && $asset_type_info['editable'] != 'false'){
        			        $edit_link .= "<a title=\"Click to edit file: ".$asset->getUrl()." (".$asset->getType().")\" href=\"".SM_CONTROLLER_DOMAIN."assets/editAsset?asset_id=".$asset->getId()."&amp;from=pagePreview\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/pencil.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this asset--></a>";
        			    }else{
        			        $edit_link = "<!--edit link-->";
        		        }
        		    
    		        }
        		    
        		    echo $edit_link;
                    
                }else{
                    return "<br />Error: ".$render_template." does not exist";
                }
                
            }else{
                if($this->getDraftMode()){
                    return "<br />Error: No asset was found with ID: ".$params['id'];
                }
            }

        }else{
            if($this->getDraftMode()){
                return "<br />Error on {property} tag: either attributes 'id' or 'name' are properly defined.";
            }
        }
    }
    
    public function renderItemPropertyValue($params){
        
        if(isset($params["name"]) && strlen($params["name"])){
            
            $requested_property_name = $params["name"];
            
            // for rendering the properties of the principal item of a meta-page
            if(!isset($params['context']) || $params['principal_item']){
            
                if(is_object($this->page) && $this->page instanceof SmartestItemPage){
                    
                    if(is_object($this->page->getPrincipalItem())){
                        
                        if(in_array($requested_property_name, $this->page->getPrincipalItem()->getModel()->getPropertyVarNames())){
                        
                            $lookup = $this->page->getPrincipalItem()->getModel()->getPropertyVarNamesLookup();
                            $property = $this->page->getPrincipalItem()->getPropertyByNumericKey($lookup[$requested_property_name]);
                            $property_type_info = $property->getTypeInfo();
                        
                            $render_template = SM_ROOT_DIR.$property_type_info['render']['template'];
                        
                            if(is_file($render_template)){
                            
                                if($this->draft_mode){
                                    $value = $property->getData()->getDraftContent();
                                }else{
                                    $value = $property->getData()->getContent();
                                }
                                
                                $render_data = array();
                                
                                //this is a hack for image attributes
                                if($params['style']){
                                    $render_data['style'] = $params['style'];
                                }
                                
                                if($params['id']){
                                    $render_data['id'] = $params['id'];
                                }
                                
                                if($params['class']){
                                    $render_data['class'] = $params['class'];
                                }
                                
                                // It's more direct to do this, though not quite so extensible. We can update this later.
                                if($property->getDatatype() == 'SM_DATATYPE_ASSET'){
                                    $this->renderAsset(array('id'=>$value, 'render_data'=>$render_data));
                                }else{
                                    $this->_smarty_include(array('smarty_include_tpl_file'=>$render_template, 'smarty_include_vars'=>array('raw_value'=>$value, 'render_data'=>$render_data)));
                                }
                            
                            }else{
                                return "Error: ".$render_template." is missing.";
                            }
                        
                            // return "Found Property: ".$requested_property_name;
                        
                        }else{
                            return "Unknown Property: ".$requested_property_name;
                        }
                    }else{
                        if($this->draft_mode){
                            return "Error: Page Item failed to build.";
                        }
                    }
                }else{
                    if($this->draft_mode){
                        return "Notice: {property} tag on static page being ignored.";
                    }
                }
            
            // for rendering the properties of an item in a list
            }else if(isset($params['context']) && ($params['context'] == 'repeat' || $params['context'] == 'list')){
                
                if(is_object($this->_tpl_vars['repeated_item_object'])){
                    
                    if(in_array($requested_property_name, $this->_tpl_vars['repeated_item_object']->getModel()->getPropertyVarNames())){
                    
                        $lookup = $this->_tpl_vars['repeated_item_object']->getModel()->getPropertyVarNamesLookup();
                        $property = $this->_tpl_vars['repeated_item_object']->getPropertyByNumericKey($lookup[$requested_property_name]);
                        $property_type_info = $property->getTypeInfo();
                    
                        $render_template = SM_ROOT_DIR.$property_type_info['render']['template'];
                    
                        if(is_file($render_template)){
                        
                            if($this->draft_mode){
                                $value = $property->getData()->getDraftContent();
                            }else{
                                $value = $property->getData()->getContent();
                            }
                        
                            $this->_smarty_include(array('smarty_include_tpl_file'=>$render_template, 'smarty_include_vars'=>array('raw_value'=>$value)));
                        
                        }else{
                            return "Error: ".$render_template." is missing.";
                        }
                        
                    
                    }else{
                        return "Unknown Property: ".$requested_property_name;
                    }
                }else{
                    if($this->draft_mode){
                        return "Error: repeated item is not an object.";
                    }
                }
                
            }
            
        }else{
            if($this->draft_mode && $this->_tpl_vars['this']['principal_item']){
                return "Error: {property} tag missing required 'name' attribute";
            }
        }
    }
    
	/* public function getTemplateAssetClass($assetclass, $params){

		$result = $this->templateHelper->getTemplateAssetClass($assetclass, $params);

		if($result['type'] == "TMPL"){
			$this->_smarty_include(array('smarty_include_tpl_file'=>'Assets/'.$result['file'], 'smarty_include_vars'=>array()));
			return $result['html'];
		}else{
        	return null;
        }
	} */
	
	public function getUserAgent(){
	    return SmartestPersistentObject::get('userAgent');
	}
	
	/* public function getAssetClass($assetclass, $params){
	
		$result = $this->templateHelper->getAssetClass($assetclass, $params);
		
		if($result['type'] != "TMPL"){
			return $result['html'];
		}
	} */
	
	public function getListData($listname){
		$result = $this->templateHelper->getList($listname);
		return $result;
	}
	
	public function getList($listname){
		
		$result = $this->getListData($listname);
		$header="ListItems/".$result['header'];
		$footer="ListItems/".$result['footer'];
		$items=$result['items'];
		$tpl_filename="ListItems/".$result['tpl_name'];
		
		if($result['header']!="" && is_file(SM_ROOT_DIR."Presentation/ListItems/".$result['header'])){
			$header = "ListItems/".$result['header'];
			$this->_smarty_include(array('smarty_include_tpl_file'=>$header, 'smarty_include_vars'=>array()));
		}
		
		if (is_array($items)){ 
		
			foreach ($items as $item){
 				$item_name=$item['item_name'];
				$properties=$item['property_details'];	
				$this->assign('name', $item_name);
				$this->assign('properties', $properties);
				$this->_smarty_include(array('smarty_include_tpl_file'=>$tpl_filename, 'smarty_include_vars'=>array()));
			}
			
		}
		
		if($result['footer']!="" && is_file(SM_ROOT_DIR."Presentation/ListItems/".$result['footer'])){
			$footer="ListItems/".$result['footer'];
			$this->_smarty_include(array('smarty_include_tpl_file'=>$footer, 'smarty_include_vars'=>array()));
		}
		
		return $result['html'];
	}
	
	/* public function getItemDetails($params){
		$set_name = $params['from'];
		$items = $this->templateHelper->getItemDetails($set_name);
 		return $items;
	} */
	
	public function getLink($params){
		return $this->templateHelper->getLink($params);
	}
	
	public function getImage($params){
		return $this->templateHelper->getImage($params);
	}
	
	public function getStylesheet($params){
		return $this->templateHelper->getStylesheet($params);
	}
	
	public function getImagePath($params){
		return $this->templateHelper->getImagePath($params);
	}

}


/**
  * PHP Controller
  *
  * PHP versions 5
  *
  * LICENSE: This source file is subject to version 3.0 of the PHP license
  * that is available through the world-wide-web at the following URI:
  * http://www.php.net/license/3_0.txt.  If you did not receive a copy of
  * the PHP License and are unable to obtain it through the web, please
  * send a note to license@php.net so we can mail you a copy immediately.
  *
  *
  * @category   Presentation
  * @package    SmartyManager
  * @author     Eddie Tejeda <eddie@visudo.com>
  * @author     Marcus Gilroy-Ware <marcus@visudo.com>
  * @copyright  2005 Visudo LLC
  * @version    0.2
  */
  
if(!class_exists('SmartestEngine')){
	require_once(SM_ROOT_DIR.'System/Templating/SmartestEngine.class.php');
}


class SmartyManager {

	private $options = array();
	private $smartyObj;
	
	public function __construct(){
		if($this->options = parse_ini_file(SM_ROOT_DIR.'Configuration/smarty.ini')){
			
		}else{
			throw new SmartestException("Config file ".SM_ROOT_DIR.'Configuration/smarty.ini'." could not be parsed.", 104);
		}
	}

	public function &initialize() {
		
		//detect if the proper directories exist
		if(!is_dir($this->options['default_templates_dir']) ){
			throw new SmartestException("SmartyManager::smartyInitialize Error: create templates directory", 104);
			// die("SmartyManager::smartyInitialize Error: create templates directory");
		}
		
		if(!is_dir( $this->options['templates_cache']) ){
			throw new SmartestException("SmartyManager::smartyInitialize Error: create template_c directory", 104);
			// die("SmartyManager::smartyInitialize Error: create template_c directory");
		}
		
		if(!is_dir( $this->options['cache']) ){
			throw new SmartestException("SmartyManager::smartyInitialize Error: create cache directory", 104);
			// die("SmartyManager::smartyInitialize Error: create cache directory");
		}
		
		if(!is_dir( $this->options['config']) ){
			throw new SmartestException("SmartyManager::smartyInitialize Error: create config directory", 104);
			// die("SmartyManager::smartyInitialize Error: create config directory");
		}
		
		if(!is_writeable($this->options['templates_cache']) ){
      
			if(!@chmod($this->options['templates_cache'], "ug+w")){
				throw new SmartestException("SmartyManager::smartyInitialize Error: directory ".$this->options['templates_cache']." needs to writable", 104);
				// die("SmartyManager::smartyInitialize Error: directory ".$this->options['templates_cache']." needs to writable");
			}
		}
    
		$smartyObj = new SmartestEngine();
		$smartyObj->template_dir = SM_ROOT_DIR.$this->options['default_templates_dir'];
		$smartyObj->compile_dir = SM_ROOT_DIR.$this->options['templates_cache'];
		$smartyObj->cache_dir = SM_ROOT_DIR.$this->options['cache'];
		$smartyObj->config_dir = SM_ROOT_DIR.$this->options['config'];
    
		return $smartyObj;
	}
}




class SmartestController extends Quince{
	
	const APPLICATION = 'SM_APP';
	const PROCESS = 'SM_PROC';
	
	function __construct($file, $automatic=true, $cache=true){
		$this->cache_dir = SM_ROOT_DIR."System/Cache/Controller/";
		parent::Quince($file, $automatic, $cache);
	}
	
	// non-standard non-quince stuff goes here
	
	public function getUserActionObject(){
		return $this->user_object;
	}
	
	public function registerProcess($type){
	    
	    $process = $this->modules[$this->moduleIndex];
	    
	    if($this->className && !is_object($this->user_object)){
	        $this->user_object = new $this->className;
	    }
	    
	    // print_r($process);
	    
	    if(is_object($this->user_object)){
	        
	        $this->user_object->setProcessName($process['name']);
	        $this->user_object->setProcessType($type);
	        $this->user_object->setProcessDirectory($process['directory']);
	        
	        if(isset($process['label']) && strlen($process['label'])){
	            $this->user_object->setProcessLongName($process['label']);
	        }
	    }
	    
	    // print_r($this->user_object);
	    
	}
		
}



include_once 'Managers/SetsManager.class.php';

class SmartestTemplateHelper{

	private $database;
	private $get = array();
	private $errorStack;
	private $setsManager;
	// private $controller;
	
	function __construct(){
		$this->database    = SmartestPersistentObject::get('db:main');
		$this->get         = SmartestPersistentObject::get('controller')->getRequestVariables();
		$this->errorStack  = SmartestPersistentObject::get('errors:stack');
		// $this->setsManager = new SetsManager();
	}
	
	public function getDataHolder(){
	    return SmartestPersistentObject::get('centralDataHolder');
	}
	
	public function getAssetClass($assetclass, $params){
	
		if(isset($params['instance']) && !empty($params['instance'])){
			$instance_name = $params['instance'];
		}else{
			$instance_name = 'default';
		}
		
		if(is_file(SM_ROOT_DIR."System/Cache/SmartestEngine/"."ac_".md5($assetclass)."-".SM_PAGE_ID.".tmp") && SM_OPTIONS_CACHE_ASSETCLASSES && SM_CONTROLLER_METHOD != "renderEditableDraftPage"){

			$html = @file_get_contents(SM_ROOT_DIR."System/Cache/SmartestEngine/"."ac_".md5($assetclass)."-".SM_PAGE_ID.".tmp");
		
		}else{
		
			if(SM_CONTROLLER_METHOD == "renderPageFromUrl"){
				if(strlen(SM_CONTROLLER_URL) > 0){
					$pageField = "page_id";
					$value = $this->getPageIdFromUrl(SM_CONTROLLER_URL);
				}else{
					$pageField = "page_id";
					$value = SM_PAGE_ID;
				}
			}else{
				$pageField = "page_webid";
				$value = $this->get['page_id'];
			}
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage" || SM_CONTROLLER_METHOD == "renderDraftPage"){
				$assetIdentifierField = "assetidentifier_draft_asset_id";
			}else{
				$assetIdentifierField = "assetidentifier_live_asset_id";
			}
		
			$sql = "SELECT DISTINCT page_webid, assettype_code, assettype_label, Assets.*, AssetIdentifiers.* 
			FROM AssetTypes, Assets, AssetIdentifiers, AssetClasses, TextFragments, Pages 
			WHERE $pageField='$value' 
			AND page_id = assetidentifier_page_id 
			AND asset_id = $assetIdentifierField
			AND assetclass_id = assetidentifier_assetclass_id 
			AND assetclass_name = '$assetclass' 
			AND assetclass_assettype_id = assettype_id";
			
			$result = $this->database->queryToArray($sql);
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$edit_link = "<a title=\"Click to edit definition for placeholder: $assetclass (".$result[0]["assettype_code"].")\" href=\"".SM_CONTROLLER_DOMAIN."websiteManager/defineAssetClass?assetclass_id=".$assetclass."&page_id=".$value."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this asset--></a>";
			}else{
				$edit_link = "<!--edit link-->";
			}
			
			if(count($result) > 0){
				
				$asset = $result[0];
				
				if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
					// $edit_link = "&nbsp;<a title=\"Click to edit definition for placeholder: $assetclass (".$result[0]["assettype_code"].")\" href=\"".SM_CONTROLLER_DOMAIN."websiteManager/defineAssetClass?assetclass_id=".$assetclass."&page_id=".$value."\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/page_white_edit.png\" alt=\"edit\" border=\"0\" /></a>";
					if(in_array($asset['assettype_code'], array("HTML", "LINE", "TEXT"))){
						$edit_link .= "&nbsp;<a href=\"".SM_CONTROLLER_DOMAIN."assets/editAsset?assettype_code=".$asset['assettype_code']."&asset_id=".$asset['asset_id']."\" title=\"Edit ".$asset['assettype_label']." placeholder\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/page_white_edit.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!--Edit this text--></a>";
					}else{
						$edit_link .= "";
					}
				}
				
				$text_fragment = $this->getAssetText($asset['asset_fragment_id']);
				if($asset['assettype_code']!="TMPL"){
				switch($asset['assettype_code']){
					case "HTML":
					
						if($params['div_class']){
							$html = "\n\n<div class=\"".$params["div_class"]."\">";
						}
					
						$html .= "\n<!--Begin Smartest HTML Include-->\n".utf8_encode(stripslashes($text_fragment))."$edit_link";
						
						if(!$params['div_class']){
							$html .= "<br />";
						}
						
						"\n<!--End Smartest HTML Include-->";
						
						if($params['div_class']){
							$html .= "\n</div>";
						}
						
						
						break;
					case "LINE":
					case "TEXT":
						$html = "<div id=\"smartestAsset_{$asset['asset_webid']}\" style=\"display:inline\">".utf8_encode(stripslashes($text_fragment))." $edit_link</div>\n";
						break;
					case "CSS":
						if($text_fragment){
							$html = "<style type=\"text/css\">\n\n/**** Begin Asset CSS ****/\n\n$text_fragment\n\n</style>\n";
						}else{
							$html = "<link rel=\"stylesheet\" type=\"text/css\" href=\"".SM_CONTROLLER_DOMAIN."/Resources/Stylesheets/{$asset['asset_url']}\" />\n";
						}
						break;
					case "JSCR":
						if($text_fragment){
							$html = "<script language=\"javascript\">\n\n//// Begin Asset Javascript /////\n\n$text_fragment\n\n</script>\n";
						}else{
							$html = "<script language=\"javascript\" src=\"".SM_CONTROLLER_DOMAIN."/Resources/Javascript/{$asset['asset_url']}\"></script>\n";
						}
						break;
					case "JPEG":
					case "GIF":
					case "PNG":
						$html = "<img src=\"".SM_CONTROLLER_DOMAIN."Resources/Images/{$asset['asset_url']}\" id=\"smartestAsset_{$asset['asset_webid']}\" alt=\"\" border=\"0\" />$edit_link";

						break;
					case "SWF":
						$html = "<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\" width=\"550\" height=\"400\" id=\"smartestAsset_{$asset['asset_webid']}\">
<param name=\"movie\" value=\"".SM_CONTROLLER_DOMAIN."/Resources/Assets/{$asset['asset_url']}\" />
<param name=\"quality\" value=\"high\" />
<param name=\"bgcolor\" value=\"#FFFFFF\" />
<embed src=\"".SM_CONTROLLER_DOMAIN."/Resources/Assets/{$asset['asset_url']}\" quality=\"high\" bgcolor=\"#FFFFFF\" width=\"550\" height=\"400\" name=\"myMovieName\" align=\"\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\"></embed>
</object>$edit_link\n";
						break;
				}
			
				if(strlen($html) > 0 && SM_CONTROLLER_METHOD != "renderEditableDraftPage" && SM_CONTROLLER_METHOD != "renderDraftPage"){
					@file_put_contents(SM_ROOT_DIR."System/Cache/SmartestEngine/"."ac_".md5($assetclass)."-".SM_PAGE_ID.".tmp", $html);
				}
			}
		}
	}
	    return array("html"=>$html, "type"=>$asset['assettype_code'], "file"=>$asset['asset_url']);
        
	}
	
	public function getTemplateAssetClass($assetclass, $params){
		
		// echo SM_CONTROLLER_METHOD;
		
		if(isset($params['instance']) && !empty($params['instance'])){
			$instance_name = $params['instance'];
		}else{
			$instance_name = 'default';
		}
		
		if(is_file(SM_ROOT_DIR."System/Cache/SmartestEngine/"."ac_".md5($assetclass)."-".SM_PAGE_ID.".tmp") && SM_OPTIONS_CACHE_ASSETCLASSES && SM_CONTROLLER_METHOD != "renderEditableDraftPage" && SM_CONTROLLER_METHOD != "renderDraftPage"){
		
			$html = @file_get_contents(SM_ROOT_DIR."System/Cache/SmartestEngine/"."ac_".md5($assetclass)."-".SM_PAGE_ID.".tmp");
		
		}else{
		
			if(SM_CONTROLLER_METHOD == "renderPageFromUrl"){
				if(strlen(SM_CONTROLLER_URL) > 0){
					$pageField = "page_id";
					$value = $this->getPageIdFromUrl(SM_CONTROLLER_URL);
				}else{
					$pageField = "page_id";
					$value = SM_PAGE_ID;
				}
			}else{
				$pageField = "page_webid";
				$value = $this->get['page_id'];
			}
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$assetIdentifierField = "assetidentifier_draft_asset_id";
			}else{
				$assetIdentifierField = "assetidentifier_live_asset_id";
			}
		
			$sql = "SELECT DISTINCT page_webid, assettype_code, Assets.*, AssetIdentifiers.* 
			FROM AssetTypes, Assets, AssetIdentifiers, AssetClasses, TextFragments, Pages 
			WHERE $pageField='$value' 
			AND page_id = assetidentifier_page_id 
			AND asset_id = $assetIdentifierField
			AND assetclass_id = assetidentifier_assetclass_id 
			AND assetclass_name = '$assetclass' 
			AND assetclass_assettype_id = assettype_id";
			
			$result = $this->database->queryToArray($sql);
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$edit_link = "&nbsp;<a title=\"Click to edit definition for container: $assetclass\" href=\"".SM_CONTROLLER_DOMAIN."websitemanager/defineAssetClass?assetclass_id=".$assetclass."&page_id=".$value."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this template--></a>";
			}else{
				$edit_link = "<!--edit link-->";
			}
			
			if(count($result) > 0){
				
				$asset = $result[0];
				
				if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				
					$edit_link .= "&nbsp;<a title=\"Click to edit the template: ".$asset['asset_url']."\" href=\"".SM_CONTROLLER_DOMAIN."assets/editAsset?assettype_code=TMPL&asset_id=".$asset['asset_id']."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/page_white_edit.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Edit this template--></a>";
				
				}
				
				$text_fragment = $this->getAssetText($asset['asset_fragment_id']);
				if($asset['assettype_code']=="TMPL"){
				
					if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
						$html = "\n".$edit_link;
					}else{
						$html = "<!--template: ".$asset['asset_url']."-->";
					}	
				}
			}
		}
	    
	    return array("html"=>$html, "type"=>$asset['assettype_code'], "file"=>$asset['asset_url']);
	
	}
	
	/////////////////////////////////getLists!!!

	public function getList($listname){
		
		  /* if(SM_CONTROLLER_METHOD == "renderPageFromUrl"){
				if(strlen(SM_CONTROLLER_URL) > 0){
					$pageField = "page_id";
					$value = $this->getPageIdFromUrl(SM_CONTROLLER_URL);
				}else{
					$pageField = "page_id";
					$value = SM_PAGE_ID;
				}
			}else{
				$pageField = "page_webid";
				$value = $this->get['page_id'];
			}
			
			$page_webid = $this->get['page_id'];
			$page_id = $this->database->specificQuery("page_id", "page_webid", $page_webid, "Pages");
			$sql="SELECT * FROM Lists WHERE list_name = '$listname' AND list_page_id = '$page_id' ";
			$result = $this->database->queryToArray($sql);
			
			foreach($result as $list){
			
				$set_id=$list['list_draft_set_id'];
				$tpl_name=$list['list_draft_template_file'];
				$header=$list['list_draft_header_template'];
				$footer=$list['list_draft_footer_template'];
				$sql = "SELECT * FROM Sets, ItemClasses WHERE Sets.set_id='$set_id' AND Sets.set_itemclass_id=ItemClasses.itemclass_id";
				$set = $this->database->queryToArray($sql);
				$set =$set[0];
				$set_type = $set['set_type'];
				$model_id = $set['itemclass_id'];
			
				if(is_numeric($model_id)){
					$items=$this->setsManager->getDataSetItemProperties($set_id,$set_type,$model_id);
					$count=count($items);	
				}
			
			}
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$edit_link = "&nbsp;<a title=\"Click to edit definition for set: ".$set['set_name']."\" href=\"".SM_CONTROLLER_DOMAIN."websitemanager/defineLists?list_id=".$listname."&page_id=".$value."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/arrow_refresh_small.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Swap this template--></a>";
			}else{
				$edit_link = "<!--edit link-->";
			}
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				
					$edit_link .= "&nbsp;<a title=\"Click to edit the set: ".$set['set_name']."\" href=\"".SM_CONTROLLER_DOMAIN."sets/editSet?set_id=".$set_id."\" style=\"text-decoration:none;font-size:11px\" target=\"_top\"><img src=\"".SM_CONTROLLER_DOMAIN."Resources/Icons/page_white_edit.png\" alt=\"edit\" style=\"display:inline;border:0px;\" /><!-- Edit this set--></a>";
				
			}
				
			$html=$edit_link;
			
			return array("items"=>$items,"html"=>$html,"tpl_name"=>$tpl_name,"header"=>$header,"footer"=>$footer); */

	}

//////////////////////////till here getLists!!!
	
	function getItemDetails($set_name){

		/* $sql = "SELECT * FROM Sets, ItemClasses WHERE Sets.set_name='$set_name' AND Sets.set_itemclass_id=ItemClasses.itemclass_id";
		$set = $this->database->queryToArray($sql);
		$set =$set[0];
		$set_id = $set['set_id'];
		$set_type = $set['set_type'];
		$model_id = $set['itemclass_id'];
		$items = $this->setsManager->getDataSetItemProperties($set_id,$set_type,$model_id);
		return $items; */
	}
	
	function getAssetText($textfragment_id){
		$sql = "SELECT textfragment_content FROM TextFragments WHERE textfragment_id='$textfragment_id'";
		$result = $this->database->queryToArray($sql);
		return $result[0]['textfragment_content'];
	}
	
	function getAsset($params){
		if(@$params['name']){
			$sql = "SELECT DISTINCT * FROM Assets, AssetTypes WHERE asset_assettype_id=assettype_id AND asset_stringid='{$params['name']}'";
		}
	}
	
	function getLink($params){
		
		$startHtml = '<a href="';
		$closingTag = '</a>';
		$html = null;
		$reservedParamNames = array("to", "with", "byId", "goCold");
		$linkable_assettypes = array("LINE", "TEXT", "JPEG", "GIF", "PNG");
		
		if(strtolower(substr($params['to'], 0, 5)) == "page:"){
		
			// link to internal page
			$_link_type = "i";
			global $site;
			$page_name = substr($params['to'], 5);
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$_link_url = "websitemanager/preview?page_id=".$this->database->specificQuery("page_webid", "page_name", $page_name, "Pages");
			}else{
				if(@$params['byId'] == "true"){
					$_link_url = "website/renderPageFromId?page_id=".$this->database->specificQuery("page_webid", "page_name", $page_name, "Pages");
				}else{
					// $_link_url = $this->database->specificQuery("page_url", "page_name", $page_name, "Pages");
					$page_id = $this->database->specificQuery("page_id", "page_name", $page_name, "Pages");
					$_link_url = $this->getPageUrlFromId($page_id);
				}
			}
			
			$_link_title = $this->database->specificQuery("page_title", "page_name", $page_name, "Pages");
			$html = $startHtml.SM_CONTROLLER_DOMAIN.$_link_url.'"';
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$html .= " target=\"_top\"";
			}
			
		/* }else if(strtolower(substr($params['to'], 0, 7)) == "action:"){
		
			
			$_link_type = "a";
			
			// looks for input in the form of: module/method/var=value/foo=bar
			
			if(preg_match('/^([\w_]+)(\/([\w_])+(\?((([\w_]+)=([\w_]+))*))?)?$/', substr($params['to'], 7), $matches)){
			
				$_link_url = $this->controller->getUrlFor($matches[1], $matches[3], $this->parseQueryString($matches[4]));
				$html = $startHtml.$_link_url.'"';
				
			}else{
			
				$_link_url = $this->controller->getUrlFor($this->controller->getModuleName(), $this->controller->getMethodName());
				$html = $startHtml.$_link_url.'"';
			
			}
			
		}else if(strtolower(substr($params['to'], 0, 5)) == "feed:"){
			
			// link to internal page
			$_link_type = "f";
			global $site;
			$feed_name = substr($params['to'], 5);
			
			// smartest/$schema/$model/$set/$export.xml
			
			if($feed_exists = $site->database->specificQuery("page_webid", "page_name", $page_name, "Pages")){
				$_link_url = SM_CONTROLLER_DOMAIN."smartest/";
				$pairing_id = $site->database->specificQuery("dataexport_pairing_id", "dataexport_name", $feed_name, "DataExports");
				$schema_id = $site->database->specificQuery("paring_schema_id", "paring_id", $pairing_id, "Pairings");
				// $_link_url .= $schema."/";
				$model_id = $site->database->specificQuery("paring_model_id", "paring_id", $pairing_id, "Pairings");
				$model = $site->database->specificQuery("itemclass_varname", "itemclass_id", $model_id, "ItemClasses");
				$_link_url .= $model."/";
				$set_id = $site->database->specificQuery("dataexport_set_id", "dataexport_name", $feed_name, "DataExports");
				// $_link_url .= $set."/";
				$_link_url .= $feed_name.".xml";
			}else{
				$_link_url = "";
			}
			
			$_link_title = $site->database->specificQuery("page_title", "page_name", $page_name, "Pages");
			$html = $startHtml.SM_CONTROLLER_DOMAIN.$_link_url.'"';
			
			if(SM_CONTROLLER_METHOD == "renderEditableDraftPage"){
				$html .= " target=\"_top\"";
			} */
			
		}else{
			
			$_link_type = "e";
			// link to any other address
			if(strtolower(substr($params['to'], 0, 7)) == "http://" || strtolower(substr($params['to'], 0, 8)) == "https://"){
				$html = $startHtml.$params['to'].'"';
			}else{
				$html = $startHtml.$params['to'].'"';
			}
			
		}
		
		if(strtolower(substr($params['with'], 0, 11)) == "assetclass:"){
			
			// an assetclass is being linked
			$assetclass_name = substr($params['with'], 11);
			$assetclass = $this->getAssetClass($assetclass_name);
			if(in_array($assetclass['type'], $linkable_assettypes)){
				$_link_contents = $assetclass["html"];
			}else{
				if($_link_type == "i"){
					// get name from db as fallback
					$_link_contents = $_link_title;
				}else{
					// is external link, so no fallback. output "link".
					$_link_contents = "link";
				}
			}
			
		}else if(strtolower(substr($params['with'], 0, 6)) == "image:"){
			
			// an image is being linked
			$image_file_name = substr($params['with'], 6);
			$image = $this->getImage(array("file"=>$image_file_name));
			
			$_link_contents = $image;
			
		}else{
			
			// fill the link with regular text
			if($_link_type == "i"){
				if(@$params['with']){
					// specified
					$_link_contents = $params['with'];
				}else{
					// unspecified
					$_link_contents = $_link_title;
				}
			}else{
				if(@$params['with']){
					// specified
					$_link_contents = $params['with'];
				}else{
					// unspecified
					$_link_contents = "link";
				}
			}
		} 
		
		
		if(@$html){
		
			// add any other attributes
			foreach($params as $attribute=>$value){
				if(!in_array($attribute, $reservedParamNames)){
					$html .=' '.$attribute.'="'.$value.'"';
				}
			}
			
			// put text in link and close tag
			$html .= '>'.$_link_contents.'</a>';
		}
		
		// optionally do not include <a> tags if this is an internal link to the current page
		
		if($_link_type == "i"){
			
			$page_webid = $this->database->specificQuery("page_webid", "page_name", $page_name, "Pages");
			
			if(@$params['goCold'] == 'true' && $page_webid == SM_PAGE_WEBID){
				return $_link_contents;
			}else{
				return $html;
			}
			
		}else{
			return $html;
		}
	}
	
	function getUrl($params){
		
		$startHtml = '';
		$closingTag = '';
		$html = null;
		$reservedParamNames = array("to", "with", "byId", "goCold");
		$linkable_assettypes = array("LINE", "TEXT", "JPEG", "GIF", "PNG");
		
		// if(strtolower(substr($params['to'], 0, 5)) == "page:"){
		
			// link to internal page
			$_link_type = "i";
			global $site;
			$page_name = substr($params['for'], 5);
			
			if(@$params['useId'] == "true"){
				$_link_url = "website/renderPageFromId?page_id=".$this->database->specificQuery("page_webid", "page_name", $page_name, "Pages");
			}else{
				// $_link_url = $this->database->specificQuery("pageurl_url", "pageurl_page_id", SM_PAGE_ID, "PageUrls");
				$_link_url = $this->getPageUrlFromId(SM_PAGE_ID);
			}
			
			// $_link_title = $site->database->specificQuery("page_title", "page_name", $page_name, "Pages");
			// $html = $startHtml.SM_CONTROLLER_DOMAIN.$_link_url.'"';
			
		// } 
		
		return $_link_url;
		
	}
	
	
	function getImage($params){
		
		$startHtml = '<img src="';
		$html = null;
		
		if(isset($params["file"]) && strlen($params["file"]) > 5){
		
			$cache_file_name = SM_ROOT_DIR."System/Cache/SmartestEngine/"."img_".md5($params["file"])."-".SM_PAGE_ID.".tmp";
			
			if(!is_file($cache_file_name) || !SM_OPTIONS_CACHE_IMAGETAGS){
			
				if(strtolower(substr($params['file'], 0, 7)) == "http://"){
			
					$html .=$startHtml.$params["file"];
				
				}else if(strtolower(substr($params['file'], 0, 9)) == "property:"){
			
					$propertyName = substr($params['file'], 9);
					$html .=$startHtml.@$params['prepend'].$this->getItemPropertyValue(array("name"=>$propertyName));
				
				}else if(strtolower(substr($params['file'], 0, 6)) == "asset:"){
			
					// $html .=$startHtml.$params["file"];
					$asset_name = substr($params['file'], 6);
					$html .=$this->getAsset(array("name"=>$asset_name));
				
				}else{
					if(@SM_OPTIONS_IMAGES_LOCAL){
					
						$local_img_dir = SM_SYSTEM_IMAGES_DIR;
						if($local_img_dir{0} == "/"){
							$html .= $startHtml.SM_SYSTEM_IMAGES_DIR.$params["file"];
						}else{
							$html .= $startHtml.SM_CONTROLLER_DOMAIN.SM_SYSTEM_IMAGES_DIR.$params["file"];
						}
					
					}else{
				
						$html .= $startHtml.SM_CONTROLLER_DOMAIN.SM_SYSTEM_IMAGES_DIR.$params["file"];
					
					}
				}
				
				$alt = (isset($params["alt"])) ? $params["alt"] : "";
				$border = (isset($params["border"])) ? $params["border"] : "0";
				
				$html .="\" alt=\"$alt\" border=\"$border\" />";
				file_put_contents($cache_file_name, $html);
			
			}else{
				
				$html = file_get_contents($cache_file_name);
				
			}
		
		}
		
		return $html;
	}
	
	function getStylesheet($params){
		
		$startHtml = "<link rel=\"stylesheet\" href=\"";
		$html = null;
		
		if(isset($params["file"]) && strlen($params["file"]) > 5){
			
			if(strtolower(substr($params['file'], 0, 7)) == "http://"){
			
				$html .= $startHtml.$params["file"];
				
			}else if(strtolower(substr($params['file'], 0, 8)) == "https://"){
			
				$html .= $startHtml.$params["file"];
			
			}else{
				
				$html .= $startHtml.SM_CONTROLLER_DOMAIN."Resources/Stylesheets/".$params["file"];
				
			}
			
			$html .= "\"";
			
			if(isset($params["media"])){
				
				$html .= " media=\"".$params["media"]."\"";
				
			}
			
			$html .= " />";
		
		}
		
		return $html;
	}
	
	function getImagePath($params){
		
		$startHtml = '';
		$html = null;
		
		if(isset($params["file"]) && strlen($params["file"]) > 5){
		
			
				if(strtolower(substr($params['file'], 0, 7)) == "http://"){
			
					$html .=$startHtml.$params["file"];
				
				}else if(strtolower(substr($params['file'], 0, 9)) == "property:"){
			
					$propertyName = substr($params['file'], 9);
					$html .=$startHtml.@$params['prepend'].$this->getItemPropertyValue(array("name"=>$propertyName));
				
				}else if(strtolower(substr($params['file'], 0, 6)) == "asset:"){
			
					$asset_name = substr($params['file'], 6);
					$html .=$this->getAsset(array("name"=>$asset_name));
				
				}else{
					if(@SM_OPTIONS_IMAGES_LOCAL){
					
						$local_img_dir = SM_SYSTEM_IMAGES_DIR;
						if($local_img_dir{0} == "/"){
							$html .= $startHtml.SM_SYSTEM_IMAGES_DIR.$params["file"];
						}else{
							$html .= $startHtml."/".SM_SYSTEM_IMAGES_DIR.$params["file"];
						}
					
					}else{
				
						$html .= $startHtml.SM_CONTROLLER_DOMAIN.SM_SYSTEM_IMAGES_DIR.$params["file"];
					
					}
				}
				
				$alt = (isset($params["alt"])) ? $params["alt"] : "";
				$border = (isset($params["border"])) ? $params["border"] : "0";
		
		}
		
		return $html;
	}
		
	function getItemPropertyValue($params){
		if(@$params["name"]){
			
		}
	}
	
	function getPageIdFromUrl($url){
		$sql = "SELECT pageurl_page_id from PageUrls WHERE pageurl_url='$url'";
		$result = $this->database->queryToArray($sql);
		return $result[0]['pageurl_page_id'];
	}
	
	function getPageUrlFromId($page_id){
		$sql = "SELECT pageurl_url from PageUrls WHERE pageurl_page_id='$page_id'";
		$result = $this->database->queryToArray($sql);
		return $result[0]['pageurl_url'];
	}
	
	function error($message="[unspecified error]"){
		if($this->errorStack instanceof ErrorStack){
			$this->errorStack->recordError($message, 101);
		}
	}

}







class SmartestBaseProcess{
    
    private $_type;
    private $_name;
    private $_long_name;
    private $_basedir;
    
    public function setProcessType($type){
        if(!isset($this->_type)){
            $this->_type = $type;
        }
    }
    
    public function getProcessType(){
        return $this->_type;
    }
    
    public function setProcessName($name){
        if(!isset($this->_name)){
            $this->_name = $name;
        }
    }
    
    public function getProcessName(){
        return $this->_name;
    }
    
    public function setProcessLongName($name){
        if(!isset($this->_long_name)){
            $this->_long_name = $name;
        }
    }
    
    public function getProcessLongName(){
        return $this->_long_name;
    }
    
    public function setProcessDirectory($basedir){
        if(!isset($this->_basedir)){
            $this->_basedir = $basedir;
        }
    }
    
    public function getProcessDirectory(){
        return $this->_basedir;
    }
    
    public function getDataTypes(){
        return SmartestDataUtility::getDataTypes();
    }
    
    public function getAssetTypes(){
        return SmartestDataUtility::getAssetTypes();
    }
    
}



/**
 * Contains the base for each public page in the website
 *
 * PHP version 5
 *
 * @category   System
 * @package    Smartest
 * @license    Smartest License
 * @author     Marcus Gilroy-Ware <marcus@visudo.com>
 */

// DO NOT EDIT! This file may be overwritten when Smartest is upgraded

class SmartestBaseApplication extends SmartestBaseProcess{

	protected $_results;
	// public $_presentationLayer;
	public $manager;
	public $domain;
	public $module;
	protected $database;
	protected $_errorStack;
	protected $_settings;
	protected $_resultIndex;
	protected $_formReturnUri;
	protected $_formContinueUri;
	protected $_formFailUri;
	protected $_userTokenHelper;
	public $_auth;
	// protected $_user;
	protected $_userMessages = array();
	
	final public function __construct(){
	
		$this->database = SmartestPersistentObject::get('db:main');
		$this->_errorStack =& SmartestPersistentObject::get('errors:stack');
		$this->domain = SM_CONTROLLER_DOMAIN;
		$this->module = SM_CONTROLLER_MODULE;
		$this->_resultIndex = 0;
		$this->userTokenHelper = new SmartestUserTokenHelper();
		
		SmartestSession::set('user:currentApp', SM_CONTROLLER_MODULE);
		SmartestSession::set('user:currentAction', SM_CONTROLLER_METHOD);
		
		// print_r(SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true));
		
		// transfer messages left over from the last request.
		
		// var_dump(SmartestCache::hasData('user:messages:nextRequest:'.$this->getUser()->getId()), true);
		// var_dump(is_array(SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true)));
		// var_dump(SmartestCache::getFileName('user:messages:nextRequest:'.$this->getUser()->getId(), true));
		
		if(SmartestSession::get('user:isAuthenticated')){
		    if(SmartestCache::hasData('user:messages:nextRequest:'.$this->getUser()->getId(), true) && is_array(SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true))){
		        $this->_userMessages = SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true);
		    }
		    
		    SmartestCache::save('user:messages:nextRequest:'.$this->getUser()->getId(), array(), -1, true);
		    
	    }
	    
	    if($this->getSite() instanceof SmartestSite){
	        $this->send(true, 'show_left_nav_options');
	    }else{
	        $this->send(false, 'show_left_nav_options');
	    }
		
		// check messages left over from the last request.
		// print_r($this->_userMessages);
		// print_r(SmartestCache::clear('user:messages:nextRequest:'.$this->getUser()->getId(), true));
		
		// print_r(SmartestSession::get('user:messages:nextRequest'));
		
		// SmartestCache::save('user:messages:nextRequest:'.$this->getUser()->getId(), array(), -1, true);
		
		// print_r(SmartestCache::load('user:messages:nextRequest'.$this->getUser()->getId(), true));
		// print_r(SmartestCache::getFileName('user:messages:nextRequest'.$this->getUser()->getId(), true));
		
		// $this->getPresentationLayer();
		
		// handle user messages
		
		/* if(!is_array($this->_userMessages)){
		
			$this->_userMessages = array();
			$this->_userMessages[0] = array();
		
		}else{
			
			$this->_userMessages[0] = array();
			$messageLevels = array_values(SmartestPersistentObject::get('user:messageLevels'));
			
			foreach($messageLevels as $key => $level){
				$this->_userMessages[$key] = $level;
			}
		}*/
		
		// $this->send($this->getUser()->__toArray(), '_user');
		// print_r($this->getUser()->__toArray());
		
		// load user-defined application-wide settings
		// TODO: add caching here
		
		if(is_file(SM_CONTROLLER_MODULE_DIR."Configuration/settings.yml")){
			// if($this->_settings['application'] = @parse_ini_file(SM_CONTROLLER_MODULE_DIR."Configuration/settings.yml")){
			$appSettingsFileData = SmartestYamlHelper::load(SM_CONTROLLER_MODULE_DIR."Configuration/settings.yml");
			
			if(is_array($appSettingsFileData)){
			    // 
			    $this->settings['application'] = $appSettingsFileData;
			    // $this->settings['application'] = SmartestConfigurationHelper::parseConfigDataArray($appSettingsFileData, 'application');
			    // print_r($this->settings['application']);
			}else{
				throw new SmartestException("Error parsing config file: ".SM_CONTROLLER_MODULE_DIR."Configuration/settings.yml");
			}
		}
		
		// load user-defined system-wide settings
		// TODO: add caching here
		if(is_file(SM_ROOT_DIR."Configuration/user.ini")){
			if($this->_settings['global'] = @parse_ini_file(SM_ROOT_DIR."Configuration/user.ini")){
				
			}else{
				throw new SmartestException("Error parsing config file: ".SM_ROOT_DIR."Configuration/user.ini");
			}
		}
		
		if(SM_OPTIONS_MANAGERS_AUTOLOAD || SM_SYSTEM_IS_BACKEND_MODULE){
		
			// Detect to see if manager classes exist and initiate them, if configured to do so
			$managerClassFile = SM_SYSTEM_MANAGERS_DIR.SM_CONTROLLER_CLASS."Manager.class.php";
			$managerClass = SM_CONTROLLER_CLASS."Manager";
			
			
			
			define("SM_MANAGER_CLASS", $managerClass);
			
			if(@is_file(SM_ROOT_DIR.SM_SYSTEM_MANAGERS_DIR.SM_CONTROLLER_CLASS."Manager.class.php")){
			
				define("SM_MANAGER_CLASS_FILE", SM_SYSTEM_MANAGERS_DIR.SM_CONTROLLER_CLASS."Manager.class.php");
				include_once(SM_MANAGER_CLASS_FILE);
			
				if(class_exists(SM_MANAGER_CLASS)){
					
					if(SM_OPTIONS_MANAGERS_GET_AUTO_DB){
						$this->manager = new $managerClass($this->database);
					}else{
						$this->manager = new $managerClass();
					}
					
				}
				
			}else if(defined("SM_CONTROLLER_MODULE_DIR")){
			  
			  // echo SM_CONTROLLER_MODULE_DIR;
			  
				if(@is_file(SM_CONTROLLER_MODULE_DIR.SM_CONTROLLER_CLASS."Manager.class.php")){
				
					define("SM_MANAGER_CLASS_FILE", SM_CONTROLLER_MODULE_DIR.SM_CONTROLLER_CLASS."Manager.class.php");
					include_once(SM_MANAGER_CLASS_FILE);
					
					if(class_exists(SM_MANAGER_CLASS)){
					
						if(SM_OPTIONS_MANAGERS_GET_AUTO_DB){
							$this->manager = new $managerClass($this->database);
						}else{
							$this->manager = new $managerClass();
						}
					
					}
				
				}
				
			}
			
		}
		
		if(method_exists($this, '__myConstructor')){
		    $this->__myConstructor();
		}
		
		if(method_exists($this, "__moduleConstruct")){
		    $this->__moduleConstruct();
	    }
	    
	    if(SmartestSession::get('user:isAuthenticated')){
	        $this->send($this->getUser()->__toArray(), '_user');
	    }
	    
	    // print_r(SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true));
	}
	
	final public function __destruct(){
		
		if(method_exists($this, "__moduleDestruct")){
			$this->__moduleDestruct();
		}
		
		// handle user messages:
		
		/* if(count($this->_userMessages)){
			array_shift($this->_userMessages);
		} */
		
		// SmartestPersistentObject::set('user:messages:nextRequest', $this->_userMessages);
		
	}
	
	///// String Stuff //////
  
	protected function getRandomString($size=32){ // creates a "random" string, $size chars in length
	
		return SmartestStringHelper::random($size);
		
	}
    
	protected function getPageNameFromTitle($page_title){
    	
		return SmartestStringHelper::toVarName($page_title);
    	
	}
	
	///// Authentication Stuff /////
	
	protected function requireAuthenticatedUser(){
		if(!$this->_auth->getUserIsLoggedIn()){
			$this->redirect($this->domain."smartest/login");
		}
	}
	
	protected function getUser(){
	    
	    return SmartestPersistentObject::get('user');
	    
	}
	
	protected function getSite(){
	    
	    return SmartestPersistentObject::get('current_open_project');
	    
	}
	
	protected function requireToken($token){
	    if(!$this->getUser()->hasToken($token)){
	        $this->addUserMessageToNextRequest('You do not have sufficient access privileges for that action.');
	        $this->redirect('/smartest');
	    }
	}
	
	///// Cache Stuff /////
	
	protected function loadData($token, $is_smartest=false){
		return SmartestCache::load($token, $is_smartest);
	}
	
	protected function saveData($token, $data, $expire=-1, $is_smartest=false){
		return SmartestCache::save($token, $data, $expire, $is_smartest);
	}
	
	protected function hasData($token, $is_smartest){
		return SmartestCache::hasData($token, $is_smartest);
	}
	
	///// Communicate with the user /////
	
	final public function addUserMessage($message, $type=1){
		// $this->_message($message, $type);
		$message = new SmartestUserMessage($message, $type);
		$this->_userMessages[] = $message;
	}
	
	final protected function addUserMessageToNextRequest($message, $type=1){
	    
	    if(SmartestSession::get('user:isAuthenticated')){
	    
	    	$next_request_messages = SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true);
		
    		if(!is_array($next_request_messages)){
    		    $next_request_messages = array();
    		}
		
    		$message = new SmartestUserMessage($message, $type);
    		$next_request_messages[] = $message;
    		SmartestCache::save('user:messages:nextRequest:'.$this->getUser()->getId(), $next_request_messages, -1, true);
		
	    }
		// print_r(SmartestCache::load('user:messages:nextRequest:'.$this->getUser()->getId(), true));
	}
	
	/* private function _message($message, $type=1){
		// $message = new SmartestUserMessage($message, $type);
		
		if(!is_array($this->_userMessages)){
			$this->_userMessages = array();
		}
		
	} */
	
	final public function getUserMessages(){
	    $messages = $this->_userMessages;
		return $messages;
	}
	
	/* public function transferUserMessages(){
	    // return $this->_userMessages[0]
	    $messages = $this->_userMessages;
	    array_shift($messages);
	} */
	
	///// Form forwarding //////
	
	protected function setFormReturnUri(){
		$_SESSION["_FORM_RETURN"] = reset(explode("?", $_SERVER["REQUEST_URI"]));
		$_SESSION["_FORM_RETURN_VARS"] = $_GET;
	}
	
	protected function setFormCompleteUri(){
		$_SESSION["_FORM_RETURN"] = reset(explode("?", $_SERVER["REQUEST_URI"]));
		$_SESSION["_FORM_RETURN_VARS"] = $_GET;
	}
	
	protected function setFormContinueUri(){
		$_SESSION["_FORM_CONTINUE"] = reset(explode("?", $_SERVER["REQUEST_URI"]));
		$_SESSION["_FORM_CONTINUE_VARS"] = $_GET;
	}
	
	protected function setFormFailUri(){
		$_SESSION["_FORM_FAIL"] = reset(explode("?", $_SERVER["REQUEST_URI"]));
		$_SESSION["_FORM_FAIL_VARS"] = $_GET;
	}
	
	protected function setFormReturnVar($var, $value){
		$_SESSION["_FORM_RETURN_VARS"][$var] = $value;
	}
	
	protected function formForward(){
		
		if($_SESSION["_FORM_RETURN"]){
			$this->_formReturnUri =& $_SESSION["_FORM_RETURN"];
		}else{
			$this->_formReturnUri = "/smartest";
		}
		
		$uri = $this->_formReturnUri;
		
		if(is_array($_SESSION["_FORM_RETURN_VARS"])){
			$uri .= "?";
			foreach($_SESSION["_FORM_RETURN_VARS"] as $var=>$value){
				$uri .= "$var=$value&";
			}
		}
		
		header("Location:".$uri);
		exit;
	}
	
	protected function formContinue(){
		
		if($_SESSION["_FORM_CONTINUE"]){
			$this->_formContinueUri =& $_SESSION["_FORM_CONTINUE"];
		}else{
			$this->_formContinueUri = "/smartest";
		}
		
		$uri = $this->_formContinueUri;
		
		if(is_array($_SESSION["_FORM_CONTINUE_VARS"])){
			$uri .= "?";
			foreach($_SESSION["_FORM_CONTINUE_VARS"] as $var=>$value){
				$uri .= "$var=$value&";
			}
		}
		
		header("Location:".$uri);
		exit;
	}
	
	protected function formFail(){
		
		if($_SESSION["_FORM_FAIL"]){
			$this->_formFailUri =& $_SESSION["_FORM_FAIL"];
		}else{
			$this->_formFailUri = "/";
		}
		
		$uri = $this->_formFailUri;
		
		if(is_array($_SESSION["_FORM_FAIL_VARS"])){
			$uri .= "?";
			foreach($_SESSION["_FORM_FAIL_VARS"] as $var=>$value){
				$uri .= "$var=$value&";
			}
		}
		
		header("Location:".$uri);
		exit;
	}
	
	protected function redirect($destination=""){
		
		if(strlen($destination) == 0){
			$destination = constant('SM_CONTROLLER_DOMAIN');
		}else if($destination{0} == "/"){
		    $destination = constant('SM_CONTROLLER_DOMAIN').substr($destination, 1);
		}
		
		header("location:".$destination);
		// exit;
	}
	
	///// Passing Data to presentation layer //////
	
	protected function getPresentationLayer(){
	    return SmartestPersistentObject::get('presentationLayer');
	}
	
	protected function getUserAgent(){
	    return SmartestPersistentObject::get('userAgent');
	}
	
	protected function setTitle($page_title){
		$this->getPresentationLayer()->assign("sectionName", $page_title);
	}
    
    final protected function bring($data, $name=""){
    	$this->send($data, $name);
    }
    
    final protected function send($data, $name=""){
        
        // print_r($data);
        
        // $data = SmartestDataUtility::stripSlashes($data);
        
    	if(strlen($name) > 0){
    		// if(!isset($this->getPresentationLayer()->_tpl_vars[$name])){
    			$this->getPresentationLayer()->assign($name, $data);
    			
    		/* }else{
    			$this->_error("A value called \"".$name."\" is already in use within the presentation layer.");
    		} */
    	}else{
    		//if(!isset($this->getPresentationLayer()->_tpl_vars["content"][$this->_resultIndex])){
    			$this->getPresentationLayer()->_tpl_vars["content"][$this->_resultIndex] = $data;
    			$this->_resultIndex++;
    		// }else{
    		//	$this->_error("A value called \"".$name."\" is already in use within the presentation layer.");
    		// }
    	}
    }
    
    
    
    ///// Preferences/Settings Access //////
    
    public function getApplicationPreference($pref_name){
    	if(isset($this->_settings['application'][$pref_name])){
    		return $this->_settings['application'][$pref_name];
    	}else{
    		return false;
    	}
    }
    
    public function getGlobalPreference($pref_name){
    	if(isset($this->_settings['global'][$pref_name])){
    		return $this->_settings['global'][$pref_name];
    	}else{
    		return false;
    	}
    }
    
    ///// Check for Libraries /////
    
    function isInstalled($library){
    	return SmartestLibHelper::isInstalled($library);
    }
    
    ///// Errors and Logging /////
    
    function log($message){
    	
    }
    
    function _error($message, $type=''){
    	
    	if(!$message){
    		$message = "[unspecified error]";
    	}
    	
    	if(!$type){
    		$type = 106;
    	}
    	
    	$this->_errorStack->recordError($message, $type);
    }

}


/**
 * Contains the base for each public page in the website
 *
 * PHP version 5
 *
 * @category   System
 * @package    Smartest
 * @author     Your name here
 */

class SmartestApplication extends SmartestBaseApplication{

	// Add any custom API functionality here and it will be common to all your applications
	
	protected function __myConstructor(){
	    
    }

}



/**
 * undocumented class
 *
 * @package Smartest
 * @author Your name here
 **/
 
class SmartestUser extends SmartestBaseUser{
    
    public function __myConstructor($arguments){
        
    }

} // END class 