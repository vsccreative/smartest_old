<?php

// Auto-generated by SmartestFileSystemHelper - Do Not Edit

/**
  * This file is a cached combination of the following files, included as one files to improve speed:

  * System/Base/SmartestException.class.php
  * System/Base/SmartestError.class.php
  * System/Base/SmartestErrorStack.class.php
  * System/Response/SmartestUserMessage.class.php
  * System/Data/SmartestSession.class.php
  * System/Data/SmartestPersistentObject.class.php
  * System/Data/SmartestDataAccessClass.interface.php
  * System/Response/SmartestResponseDataHolder.class.php
  * System/Data/SmartestMysql.class.php
  * System/Data/SmartestSqllite.class.php
  * System/Data/SmartestCacheDb.class.php
  * System/Data/SmartestCmsItem.class.php
  * System/Data/SmartestDataUtility.class.php
  * System/Data/SmartestFile.class.php

  */



class SmartestException extends Exception{
	
	protected $_redirectUrl = null;
	
	function __construct($message, $code=100, $verboseType="Unknown or Miscellaneous"){
		parent::__construct();
		$this->code = $code;
		$this->message = $message;
	}
	
	function setRedirectUrl($url){
	    $this->_redirectUrl = $url;
	}
	
	function getRedirectUrl(){
	    return $this->_redirectUrl;
	}

}



class SmartestError{

	protected $verboseType;
	protected $message;
	protected $code;
	
	public function __construct($message="[No Error Message Given]", $code=100, $verboseType="Unknown or Miscellaneous"){
		$this->code = $code;
		$this->message = $message;
		$this->verboseType = $verboseType;
	}
	
	public function getMessage(){
		return $this->message;
	}
	
	public function getVerboseType(){
		return $this->verboseType;
	}
	
	public function getType(){
		return $this->code;
	}

}



define("SM_ERROR_MISC", 100);
define("SM_ERROR_TMPL", 101);
define("SM_ERROR_FILES", 102);
define("SM_ERROR_PERMISSIONS", 102);
define("SM_ERROR_AUTH", 103);
define("SM_ERROR_DB", 104);
define("SM_ERROR_DATABASE", 104);
define("SM_ERROR_PHP", 105);
define("SM_ERROR_USER", 106);
define("SM_ERROR_MODEL", 107);

class SmartestErrorStack{
	
	protected $stack = array();
	protected $stackIndex = 0;
	protected $errorCodes;
	
	function __construct(){
		
		$this->errorCodes = array(
			"100" => "Unknown or Miscellaneous",
			"101" => "Presentation",
			"102" => "Files and Permissions",
			"103" => "Authentication",
			"104" => "Database",
			"105" => "PHP",
			"106" => "User Code",
			"107" => "Object Model Automation"
		);
		
	}
	
	function display(){
		if(count($this->stack)){
			if(defined("SM_DEVELOPER_MODE") && @SM_DEVELOPER_MODE == true){
				$errors = $this->getErrors();
				include SM_ROOT_DIR."System/Response/ErrorPages/errorlog.php";
				exit;
			}else{
				include SM_ROOT_DIR."System/Response/ErrorPages/niceerror.php";
				exit;
			}
		}
	}
	
	function recordError($message="[No error message given]", $type=100){
		$this->stack[$this->stackIndex] = new SmartestError($message, $type, @$this->errorCodes[$type]);
		$this->stackIndex++;
	}
	
	function getErrors(){
		return $this->stack;
	}
	
}







class SmartestUserMessage{
	
	private $_message;
	private $_type;
	
	public function __construct($message, $type){
		$this->_message = $message;
		$this->_type = $type;
	}
	
	public function getMessage(){
		return $this->_message;
	}
	
	public function getType(){
		return $this->_type;
	}
	
}



class SmartestSession{
    
    const ALL = 100;
    const OBJECTS = 101;
    const NOTFALSE = 102;
    const NOT_FALSE = 102;
    
	final static function get($object_name){
		
		if(strlen($object_name)){
			
			$key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key .= $name;
			
			if(array_key_exists($key, $_SESSION)){
				return $_SESSION[$key];
			}else{
				return null;
			}
		}
	}
	
	final static function set($object_name, $data){
		
		if(strlen($object_name)){
			
			// print_r(array_keys($_SESSION));
			
			$key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key .= $name;
			
			if(isset($_SESSION)){
			    // echo '$_SESSION['.$key.'] = '.print_r($data, true)."\n";
			    $_SESSION[$key] = &$data;
			    if($key == 'smartest/__newPage'){
			        echo $data;
			    }
			}else{
			    throw new SmartestException('SmartestSession or SmartestPersistentObject used while session was not active');
			}
		}
	}
	
	function clear($object_name){
	    if(strlen($object_name)){
			
			$key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key .= $name;
			
			if(array_key_exists($key, $_SESSION)){
			    unset($_SESSION[$key]);
			    return true;
		    }else{
		        return false;
		    }
		}
	}
	
	function hasData($object_name){
	    if(strlen($object_name)){
			
			$key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key .= $name;
			
			if(array_key_exists($key, $_SESSION)){
			    return true;
		    }else{
		        return false;
		    }
		}
	}
	
	function clearAll($killNonSmartest=false){
	    
	    if($killNonSmartest){
	        $killed = array_keys($_SESSION);
	        session_destroy();
	    }else{
	        $killed = array();
	        foreach($_SESSION as $name=>$value){
	            if(substr($name, 0, 9) == 'smartest/'){
	                $killed[] = $name;
	                unset($_SESSION[$name]);
	            }
	        }
	    }
	    
	    return $killed;
	    
	}
	
	function getRegisteredNames($type = 100){
	    
	    $vars = array();
	    
	    switch($type){
	        case self::ALL:
	        foreach($_SESSION as $name=>$value){
	            if(substr($name, 0, 9) == 'smartest/'){
	                $vars[] = $name;
	            }
	        }
	        break;
	        
	        case self::OBJECTS:
	        foreach($_SESSION as $name=>$value){
	            if(substr($name, 0, 9) == 'smartest/' && is_object($value)){
	                $vars[] = $name;
	            }
	        }
	        break;
	        
	        case self::NOTFALSE:
	        foreach($_SESSION as $name=>$value){
	            if(substr($name, 0, 9) == 'smartest/' && $value){
	                $vars[] = $name;
	            }
	        }
	        break;
	    }
	    
	    return $vars;
	}
	
}



class SmartestPersistentObject extends SmartestSession{

	

}



interface SmartestDataAccessClass{
	
	public function queryToArray($query);
	public function rawQuery($query);
	public function howMany($query);
	public function specificQuery($wantedField, $qualifyingField, $qualifyingValue, $table);
	public function getDebugInfo();
	
}



/**
 * undocumented class
 *
 * @package Smartest
 * @author Marcus Gilroy-Ware
 **/
 
class SmartestResponseDataHolder{
    
    private $_data = array();
    
    public function __construct(){
        
    }
    
    final public function get($object_name){
		
		if(strlen($object_name)){
			
			// $key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key = $name;
			
			if(array_key_exists($key, $this->_data)){
				return $this->_data[$key];
			}else{
				return null;
			}
		}
	}
	
	final public function set($object_name, $data){
		
		if(strlen($object_name)){
			
			// $key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key = $name;
			
			$this->_data[$key] = $data;
		}
	}
	
	final public function clear($object_name){
	    
	    if(strlen($object_name)){
			
			// $key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key = $name;
			
			unset($this->_data[$key]);
		}
	}
	
	final public function has(){
	    
	    if(strlen($object_name)){
			
			// $key = 'smartest/';
			
			$parts = explode(':', $object_name);
			$name = implode('/', $parts);
			
			$key = $name;
			
			if(array_key_exists($key, $this->data)){
				return true;
			}else{
				return false;
			}
		}
	    
	}

} // END class 



/**
 * Implements a mysql abstraction layer
 *
 * PHP versions 4/5
 *
 * @category   System
 * @package    Smartest
 * @license    read license file
 * @author     Marcus Gilroy-Ware <marcus@visudo.com>
 */

if(!defined("UNSUPPORTED_QUERY")){
	define("UNSUPPORTED_QUERY", false);
}

class SmartestMysql implements SmartestDataAccessClass{

	protected $dblink;
	public $lastQuery;
	protected $queryHistory;
	protected $id;
	protected $databaseName;
	protected $options = array();
	// protected $remember_password;
  
	function __construct($server, $username, $database, $password="", $remember_password=true){
	    
	    $this->options['server'] = $server;
	    $this->options['username'] = $username;
	    $this->options['database'] = $database;
	    $this->options['remember_password'] = $remember_password;
	    
	    if($remember_password){
	        $this->options['password'] = $password;
        }
        
        if($password){
	        $this->options['password_needed'] = true;
        }else{
            $this->options['password_needed'] = false;
        }
	    
		if($this->dblink = @mysql_connect($server, $username, $password)){
			// @mysql_set_charset("UTF-8", $this->dblink);
			$this->queryHistory = array();
			$this->rawQuery("SET NAMES 'utf8'");
			mysql_select_db($database, $this->dblink);
			$this->databaseName = $database;
			$this->lastQuery = "no queries made yet";
			
		}else{
			throw new SmartestException("Could not connect to MySQL", SM_ERROR_DB);
		}
	}
	
	protected function reconnect(){
	    if($this->options['password_needed'] && isset($this->options['password'])){
	        if($this->dblink = @mysql_connect($this->options['server'], $this->options['username'], $this->options['password'], true)){
    			// @mysql_set_charset("UTF-8", $this->dblink);
    			mysql_query("SET NAMES 'UTF8'", $this->dblink);
    			@mysql_select_db($this->databaseName, $this->dblink);
    			return true;
    		}else{
    			return false;
    		}
	    }else{
	        // password is needed to connect, but not supplied
	        return false;
	    }
	}
	
	public function getTables(){
		
		$sql = "SHOW TABLES FROM ".$this->databaseName;
		// $result = mysql_query($sql);

		$tables = $this->queryToArray($sql);
		
		$table_names = array();
		
		foreach($tables as $tr){
			$table_names[] = $tr["Tables_in_".$this->databaseName];
		}
		
		return $table_names;
		
	}
	
	public function getColumns($table){
		
		$sql = "SHOW COLUMNS FROM ".$table;
		// $result = mysql_query($sql);

		$columns = $this->queryToArray($sql);
		
		return $columns;
		
	}
	
	public function getColumnNames($table){
		
		$sql = "SHOW COLUMNS FROM ".$table;
		// $result = mysql_query($sql);

		$columns = $this->queryToArray($sql);
		
		$names = array();
		
		foreach($columns as $column){
			$names[] = $column['Field'];
		}
		
		return $names;
		
	}
	
	public function rawQuery($querystring){
	    if(!$this->dblink && !$this->reconnect()){
	        throw new SmartestException("Lost connection to to MySQL database", SM_ERROR_DB);
        }else{
	        $result = mysql_query($querystring, $this->dblink);
    	    // var_dump($result);
    		if($result){
    			$this->recordQuery($querystring);
    			$this->id = mysql_insert_id($this->dblink);
    			return $result;
    		}else{
    			$this->recordQuery($querystring);
    			return false;
    		}
	    }
	}
	
	protected function getInsertId(){
		return $this->id;
	}
  
	public function howMany($querystring){
	    
	    if(!$this->dblink && !$this->reconnect()){
	    
	        throw new SmartestException("Lost connection to to MySQL database", SM_ERROR_DB);
        
        }else{
	    
		    if($result = @mysql_query($querystring, $this->dblink)){
			    $cardinality = @mysql_num_rows($result);
			    $this->recordQuery($querystring);
			    return $cardinality;
		    }else{
			    return "0";
		    }
		
	    }
	}
	
	public function queryToArray($querystring){
	    
		if(!$this->dblink && !$this->reconnect()){
	    
	        throw new SmartestException("Lost connection to to MySQL database", SM_ERROR_DB);
        
        }else{
		
		    $resultArray = array();
		
		    $result = @mysql_query($querystring, $this->dblink);
		
		    for($i=0;$i<@mysql_num_rows($result);$i++){
    			$row = @mysql_fetch_array($result, MYSQL_ASSOC);
    			array_push($resultArray, $row);
    		}
		
    		$this->recordQuery($querystring);
		
    		return $resultArray;
		
	    }
	}
	
	protected function recordQuery($querystring){
		
		if(strlen(@mysql_error($this->dblink)) > 0){
			$error = "MySQL ERROR ".@mysql_errno($this->dblink) . ": " . @mysql_error($this->dblink);
		}else{
			$error = "Query OK";
		}
		
		$this->lastQuery = $querystring;
		array_push($this->queryHistory, $querystring."; ".$error);
	}
	
	public function specificQuery($wantedField, $qualifyingField, $qualifyingValue, $table){
	    
	    if(!$this->dblink){
		    $this->reconnect();
		}
	    
		$query = "SELECT $wantedField, $qualifyingField FROM $table WHERE $qualifyingField='$qualifyingValue' LIMIT 1";
		if($result = $this->rawQuery($query)){
			// $this->recordQuery($query);
			$value = @mysql_result($result, 0, $wantedField);
			return $value;
		}
	}
	
	protected function getQueryType($querystring){
    
    	if(preg_match( '/^(\w+)\s/i', $querystring, $match)){
			return strtoupper(trim($match[0]));
    	}else{
			return false;
    	}
	}
	
	
	public function query($querystring) {
		switch ($this->getQueryType($querystring)){
			
			case 'UPDATE': // update and delete queries return number of affected rows.
			case 'DELETE':
				
				if($result = $this->rawQuery($querystring)){
					return @mysql_affected_rows($result);
				}
				
				break;

			case 'INSERT': // do insert query and return id of last newly inserted row.
				// echo $querystring;
        		$result = $this->rawQuery($querystring);
        		// var_dump($result);
				return @mysql_insert_id($this->dblink);
				
				break;

			case 'SELECT': // select query returns data as array.
				if($data = $this->queryToArray($querystring)){
					return $data;
				}else{
					return false;
				}
				
				break;

			default:
				return UNSUPPORTED_QUERY;
		}

	}
	
	public function getDebugInfo(){
		return $this->queryHistory;
	}
}







class SmartestSqllite implements SmartestDataAccessClass{
	
	protected $handle;
	protected $queryHistory = array();
	protected $tables = array();
	public $lastQuery;
	
	public function __construct($database_file='System/Cache/Data/smartest_main.db'){
		if(function_exists('sqlite_open')){
			if($this->handle = sqlite_open($database_file)){
				// connection was successful
				$this->rawQuery('BEGIN;');
			}else{
				throw new SmartestException("Could not connect to SQLite", SM_ERROR_DB);
				return null;
			}
		}else{
			throw new SmartestException("SQLite needs to be installed", SM_ERROR_PHP);
			return null;
		}	
	}
	
	public function queryToArray($querystring){
		
		$result = @sqlite_unbuffered_query($this->handle, $querystring, SQLITE_ASSOC, $last_error);
		$resultset = array();
		
		while($row = sqlite_fetch_array($result)){
			$resultset[] = $row;
		}
		
		$this->recordQuery($querystring, $last_error);
		
		return $resultset;
		
	}
	
	public function rawQuery($querystring){
		$result = @sqlite_unbuffered_query($this->handle, $querystring, SQLITE_ASSOC, $last_error);
		$this->recordQuery($querystring, $last_error);
	}
	
	public function howMany($querystring){
		
	}
	
	public function specificQuery($wantedField, $qualifyingField, $qualifyingValue, $table){
		
	}
	
	public function getTables(){
		
		if(!count($this->tables)){
		
			$sql = "SELECT name FROM sqlite_master WHERE type = 'table'";
			// $result = $this->rawQuery($sql);

			$tables = $this->queryToArray($sql);
		
			$table_names = array();
		
			foreach($tables as $tr){
				$table_names[] = $tr['name'];
			}
			
			$this->tables = $table_names;
		
		}else{
			
			return $this->tables;
			
		}
		
		return $tables;
		
	}
	
	public function getColumns($table){
		
		/* $sql = "SHOW COLUMNS FROM ".$table;
		$result = mysql_query($sql);

		$columns = $this->queryToArray($sql);
		
		return $columns; */
		
	}
	
	public function getColumnNames($table){
		
		/* $sql = "SHOW COLUMNS FROM ".$table;
		$result = mysql_query($sql);

		$columns = $this->queryToArray($sql);
		
		$names = array();
		
		foreach($columns as $column){
			$names[] = $column['Field'];
		}
		
		return $names; */
		
	}
	
	
	protected function getQueryType($querystring){
    
    	if(preg_match( '/^(\w+)\s/i', $querystring, $match)){
			return strtoupper(trim($match[0]));
    	}else{
			return false;
    	}
	}
	
	protected function recordQuery($querystring, $error=null){
		
		if($error){
			$error_string = "SQLITE ERROR: " . $error;
		}else{
			$error_string = "Query OK";
		}
		
		$this->lastQuery = $querystring;
		
		array_push($this->queryHistory, $querystring." ".$error_string);
	}
	
	public function getDebugInfo(){
		return $this->queryHistory;
	}
	
}



class SmartestCacheDb extends SmartestSqllite{
	
	public function __construct(){
		parent::__construct('System/Cache/Data/smartest_cache.db');
		$this->init();
		
	}
	
	protected function init(){
		
		$tables = $this->getTables();
		
		if(in_array('cache', $tables)){
			// table 'cache' exists - check structure
		}else{
			// table doesn't exist - this is probably a first run
			$sql = "CREATE TABLE cache(id CHAR(32) PRIMARY KEY, expiry INTEGER(10), is_smartest CHAR(1));COMMIT;";
			$this->rawQuery($sql);
		}
	}
	
	public function save(){
		
	}
	
	public function getExpiredCacheItems(){
		
	}
	
}



/**
* @package Smartest
* @subpackage CMS Object Model
* @author Marcus Gilroy-Ware <marcus@mjgw.com>
* SmartestCmsItem is the underlying class that is extended to create the objects that are created and edited in the CMS
* It is also used
*/

class SmartestCmsItem{
	
	/** 
	* Description
	* @access protected
	* @var mixed
	*/
	protected $_item;
	
	/** 
	* Description
	* @access protected
	* @var SmartestModel
	*/
	protected $_model = null;
	
	/** 
	* A list of the actual properties of the loaded object. The numeric keys are the primary keys of the properties in the Properties table.
	* @access protected
	* @var array
	*/
	protected $_properties = array();
	
	/** 
	* A list of all those properties that have been modified which is generated and updated automatically so that when the object is saved, only the properties in this list will be updated.
	* @access protected
	* @var array
	*/
	protected $_modified_properties = array();
	
	/** 
	* A list of any properties that are referred to by the user's code, but aren't linked to actual properties in the structure of the model.
	* @access protected
	* @var array
	*/
	protected $_overloaded_properties = array();
	
	/** 
	* A mapping of the items' property names to the ids of the properties.
	* @access protected
	* @var array
	*/
	protected $_properties_lookup = array();
	
	/** 
	* A mapping of the items' property names to the varnames of the properties.
	* @access protected
	* @var array
	*/
	protected $_properties_varnames_lookup = array();
	
	/** 
	* Description
	* @access protected
	* @var array
	*/
	protected $_property_values_lookup = array();
	
	/** 
	* Description
	* @access protected
	* @var boolean
	*/
	
	protected $_came_from_database = false;
	protected $_model_built = false;
	protected $_lookups_built = false;
	protected $_save_errors = array();
	
	/** 
	* Description
	* @access protected
	* @var SmartestMysql
	*/
	protected $database;
	
	const NAME = '_SMARTEST_ITEM_NAME';
	const ID = '_SMARTEST_ITEM_ID';
	
	const NOT_CHANGED = 100;
	const AWAITING_APPROVAL = 101;
	const CHANGES_APPROVED = 102;
	
	public function __construct(){
		
		$this->database = SmartestPersistentObject::get('db:main');
		$this->_item = new SmartestItem;
		
		$this->generateModel();
		$this->generatePropertiesLookup();
		
	}
	
	private function generateModel(){
		
		// $this->getModel();
		
		if(isset($this->_model_id) && !$this->_model_built){
		
		    if(SmartestCache::hasData('model_properties_'.$this->_model_id, true)){
			    $result = SmartestCache::load('model_properties_'.$this->_model_id, true);
		    }else{
			    // gotta get that from the database too
			    $sql = "SELECT * FROM ItemProperties WHERE itemproperty_itemclass_id='".$this->_model_id."'";
			    $result = $this->database->queryToArray($sql);
			    SmartestCache::save('model_properties_'.$this->_model_id, $result, -1, true);
		    } 
		
		    // print_r($result);
			
		    $properties = array();
			
		    foreach($result as $key => $raw_property){
		        
		        $property = new SmartestItemProperty;
		        
		        // if(!){
		            $property->hydrate($raw_property);
		        // }
		        
			    $this->_properties[$raw_property['itemproperty_id']] = $property;
		    }
		    
		    $this->_model_built = true;
		
	    }
		
	}
	
	private function generatePropertiesLookup(){
		
		if(isset($this->_model_id)){
		
		    if(SmartestCache::hasData('model_properties_'.$this->_model_id, true)){
			    $result = SmartestCache::load('model_properties_'.$this->_model_id, true);
		    }else{
			    // gotta get that from the database too
			    $sql = "SELECT itemproperty_id, itemproperty_name, itemproperty_varname FROM ItemProperties WHERE itemproperty_itemclass_id='".$this->_model_id."'";
			    $result = $this->database->queryToArray($sql);
			    SmartestCache::save('model_properties_'.$this->_model_id, $result, -1, true);
		    }
			
		    $properties = array();
			
		    foreach($result as $key => $raw_property){
			    $this->_properties_lookup[SmartestStringHelper::toCamelCase($raw_property['itemproperty_name'])] = $raw_property['itemproperty_id'];
		    }
		
		    foreach($result as $key => $raw_property){
			    $this->_properties_varnames_lookup[SmartestStringHelper::toCamelCase($raw_property['itemproperty_name'])] = $raw_property['itemproperty_varname'];
		    }
		    
		    $this->_lookups_built = true;
		
	    }
		
	}
	
	function __call($name, $args){
		if (strtolower(substr($name, 0, 3)) == 'get') {
			return $this->getField(substr($name, 3), $args[0]);
		}
    
		if ((strtolower(substr($name, 0, 3)) == 'set') && count($args)) {
			return $this->setField(substr($name, 3), $args[0]);
		}
	}
	
	private function getField($field_name, $draft=false){
		if(array_key_exists($field_name, $this->_properties_lookup)){
		    if($this->_properties[$this->_properties_lookup[$field_name]] instanceof SmartestItemProperty){
			    // return $this->_properties[$this->_properties_lookup[$field_name]];
			    if($this->_properties[$this->_properties_lookup[$field_name]]->getData() instanceof SmartestItemPropertyValue){
		            if($draft){
		                return $this->_properties[$this->_properties_lookup[$field_name]]->getData()->getDraftContent();
		            }else{
		                return $this->_properties[$this->_properties_lookup[$field_name]]->getData()->getContent();
		            }
		        }else{
		            // no value found, so create one
		            $ipv = new SmartestItemPropertyValue;
    	            $ipv->setPropertyId($this->_properties[$this->_properties_lookup[$field_name]]->getId());
    	            $ipv->setItemId($this->getItem()->getId());
    	            $ipv->setDraftContentId($this->_properties[$this->_properties_lookup[$field_name]]->getDefaultValue());
    	            $ipv->save();
    	            
    	            if($draft){
    	                return $ipv->getDraftContent();
    	            }else{
    	                return null;
    	            }
		        }
		    }
		}else if(array_key_exists($field_name, $this->_overloaded_properties)){
			return $this->_overloaded_properties[$field_name];
		}else{
			return null;
		}
	}
	
	private function setField($field_name, $value){
		if(array_key_exists($field_name, $this->_properties_lookup)){
			// field being set is part of the model and corresponds to a column in the db table
			
			// $this->_properties[$this->_properties_lookup[$field_name]]->setDraftContent($value);
			$this->setPropertyValueByNumericKey($this->_properties_lookup[$field_name], $value);
			
			// $this->_modified_properties[$this->_properties_lookup[$field_name]] = $value;
		}else{
			// field being set is an overloaded property, which is stored, but not retrieved from or stored in the db
			$this->_overloaded_properties[$field_name] = $value;
			
		}
		
		return true;
	}
	
	public function setModelId($id){
	    
	    if($this instanceof SmartestCmsItem && !$this->_model_built && is_numeric($id)){
	        
	        $this->_model_id = $id;
	        $this->_model = new SmartestModel;
	        
	        if(!$this->_model->hydrate($this->_model_id)){
	            throw new SmartestException('The model ID '.$this->_model_id.' doesn\'t exist.');
	        }
	        
	        if(!$this->_lookups_built){
    	        $this->generateModel();
    	        $this->generatePropertiesLookup();
    	    }
	        
	    }
	    
	}
	
	public function setSiteId($id){
	    if(is_object($this->_item)){
	        $this->_item->setSiteId($id);
        }
	}
	
	public function hydrateNewFromRequest($request_data){
	    
	    // print_r($request_data);
	    
	    // $this->_save_errors = array();
	    
	    if(is_array($request_data)){
	            
            $this->_item->setName($request_data['_name']);
            
            //if(isset($request_data['_is_public']) && in_array($request_data['_is_public'], array("TRUE", "FALSE"))){
            //    $this->_item->setPublic($request_data['_is_public']);
            // }else{
            $this->_item->setPublic('FALSE');
            // }
            
            $this->_item->setItemclassId($this->_model_id);
            $this->_item->setSlug(SmartestStringHelper::toSlug($this->_item->getName()));
            $this->_item->setWebid(SmartestStringHelper::random(32));
            $this->_item->setCreated(time());
            $this->_item->setModified(time()+2); // this is to make it show up on the approval todo list
            
            if(SmartestPersistentObject::get('user') instanceof SmartestUser){
                $this->_item->setCreatedbyUserid(SmartestPersistentObject::get('user')->getId());
            }
	        
	        foreach($request_data as $key => $value){
	        
	            if(isset($this->_properties[$key]) && !in_array($key, array('_name', '_is_public')) && is_object($this->_properties[$key])){
	                
	                $this->setPropertyValueByNumericKey($key, $value);
                    
	            }else{
	                // echo "property value object not found<br />";
	                // property object doesn't exist
	                // $this->_save_errors[$key] = $value;
	                // TODO: decide what to do here and implement it here
	            }
	        }
	        
	        if(!count($this->_save_errors)){
	            return true;
	        }else{
	            return false;
	        }
	        
	    }else{
	        
	        // error - expecting data in associative array
	        
	    }
	}
	
	public function hydrate($id, $draft=false){
		
		if($this->_item->hydrate($id)){
		    
		    // echo($id.' was hydrated ');
		    $this->_came_from_database = true;
		    // var_dump($this->isHydrated());
		    
		    if(!$this->_model_built){
		        $this->_model_id = $this->_item->getItemclassId();
		        $this->generateModel();
		    }
		    
		    if(!$this->_lookups_built){
		        $this->generatePropertiesLookup();
		    }
		    
		    $properties_sql = "SELECT * FROM ItemProperties WHERE itemproperty_itemclass_id='".$this->_item->getItemclassId()."'";
		    $properties_result = $this->database->queryToArray($properties_sql);
		    
		    // print_r($this->_properties);
		    
		    // loop through properties
		    foreach($properties_result as $property){
		        
		        if(!isset($this->_properties[$property['itemproperty_id']]) || !is_object($this->_properties[$property['itemproperty_id']])){
		            SmartestCache::clear('model_properties_'.$this->_model_id, true);
		            $this->_properties[$property['itemproperty_id']] = new SmartestItemProperty;
		            // $this->_properties[$property['itemproperty_id']]
		        }
		        
			    $this->_properties[$property['itemproperty_id']]->hydrate($property);
			    $this->_properties[$property['itemproperty_id']]->setContextualItemId($this->_item->getId());
		    }
		    
            $values_sql = "SELECT * FROM ItemPropertyValues WHERE itempropertyvalue_item_id='$id'";
		    $result = $this->database->queryToArray($values_sql);
		
		    // then loop through properties again, making sure all are given either a ipv from the last db query, or given a new one if none was found.
		    // these ifs and buts shouldn't run very often if everything is working as it should
			
			foreach($result as $propertyvalue){
			    
                // if the property object does not exist, create and hydrate it
			    if(!isset($this->_properties[$propertyvalue['itempropertyvalue_property_id']]) && is_object($this->_properties[$propertyvalue['itempropertyvalue_property_id']])){
			        $this->_properties[$propertyvalue['itempropertyvalue_property_id']] = new SmartestItemProperty;
			        $this->_properties[$propertyvalue['itempropertyvalue_property_id']]->hydrate($propertyvalue['itempropertyvalue_property_id']);
			    }
			    
			    // give the property the current item id, so that it knows which ItemPropertyValue record to retrieve in any future operations (though it isn't needed in this one)
			    $this->_properties[$propertyvalue['itempropertyvalue_property_id']]->setContextualItemId($this->_item->getId());
			    $this->_properties[$propertyvalue['itempropertyvalue_property_id']]->hydrateValueFromIpvArray($propertyvalue);
			    
		    }
		    
		    // all properties should now be represented.
		    // last jobs are:
		    //// 1. to make sure all property objects have value objects
		    //// 2. to give the value objects info about their properties, without doing more queries.
		    foreach($this->_properties as $pid=>$p){
		        // this function will automatically crate a value and save it
		        $p->getData()->hydratePropertyFromExteriorArray($p->getOriginalDbRecord());
		    }
		    
		    return true;
		
	    }else{
	        
	        return false;
	        
	    }
		
	}
	
	public function isHydrated(){
	    // var_dump($this->getItem()->isHydrated());
	    // return $this->getItem()->isHydrated();
	    return $this->_came_from_database;
	}
	
	public function getId(){
		return $this->getItem()->getId();
	}
	
	public function getName(){
		return $this->getItem()->getName();
	}
	
	public function getSlug(){
		return $this->getItem()->getSlug();
	}
	
	public function getWebid(){
		return $this->getItem()->getWebid();
	}
	
	public function getIsPublic(){
		return ($this->getItem()->getPublic() == 'TRUE') ? 'TRUE' : 'FALSE';
	}
	
	public function getItem(){
		return $this->_item;
	}
	
	public function getUrl(){
	    
	    if($this->getMetapageId()){
	        $page_id = $this->getMetapageId();
	    }else if($this->getModel()->getDefaultMetapageId()){
	        $page_id = $this->getModel()->getDefaultMetapageId();
	    }else{
	        return null;
	    }
	    
	    $lh = new SmartestCmsLinkHelper;
	    $lh->parse('metapage:id='.$page_id.':id='.$this->getId());
	    
	    return $lh->getUrl();
	    
	}
	
	public function getModel(){
	    
	    // print_r($this->_item);
	    
	    if(!$this->_model && is_object($this->_item) && $this->_item->getItemclassId()){
	        $model = new SmartestModel;
	        $model->hydrate($this->_item->getItemclassId());
	        $this->_model = $model;
	    }
	    
	    return $this->_model;
	    
	}
	
	public function getDescriptionFieldContents(){
	    
	    // default_description_property_id
	    if($this->getModel()->getDefaultDescriptionPropertyId()){
	        $property_id = $this->getModel()->getDefaultDescriptionPropertyId();
	    }else{
	        return null;
	    }
	    
	    $property = $this->getPropertyByNumericKey($property_id);
	    
	    if(is_object($property)){
	        
	        $type_info = $property->getTypeInfo();
	        
	        if($property->getDatatype() == 'SM_DATATYPE_ASSET'){
	            $asset = new SmartestAsset;
	            if($asset->hydrate($this->getPropertyValueByNumericKey($property_id))){
	                // get asset content
	                return $asset->getContent();
	            }else{
	                // throw new SmartestException(sprintf("Asset with ID %s was not found.", $this->getPropertyValueByNumericKey($property_id)));
	                return null;
	            }
	        }else{
	            return $this->getPropertyValueByNumericKey();
	        }
	        
	    }else{
	        throw new SmartestException(sprintf("Property with ID %s is not an object.", $property_id));
	    }
	    
	}
	
	public function compile($draft=false, $numeric_keys=false){
	    return $this->__toArray($draft, $numeric_keys);
	}
	
	public function __toArray($draft=false, $numeric_keys=false){
		// return associative array of property names and values
		$result = array();
		
		// print_r($this->_properties_varnames_lookup);
		// print_r($this);
		
		// print_r($draft);
		
		$result = $this->_item->__toArray();
		
		foreach($this->_properties_lookup as $fn => $id){
		    
		    if($numeric_keys){
		        $key = $id;
		    }else{
		        $key = $this->_properties_varnames_lookup[$fn];
		    }
		    
		    if($draft){
		        // echo $this->_properties[$id]->getData()->getDraftContent().', ';
		        if(isset($this->_properties[$id]) && is_object($this->_properties[$id]->getData())){
		            $result[$key] = $this->_properties[$id]->getData()->getDraftContent();
	            }
	        }else{
	            if(isset($this->_properties[$id]) && is_object($this->_properties[$id]->getData())){
	                $result[$key] = $this->_properties[$id]->getData()->getContent();
                }
	        }
		}
		
		/*$result['id'] = $this->getItem()->getId();
		$result['web_id'] = $this->getItem()->getWebid();
		$result['name'] = $this->getItem()->getName(); */
		
		$result['_model'] = $this->getModel()->__toArray();
		$result['_properties'] = $this->getPropertiesAsArrays($numeric_keys);
		
		ksort($result);
		
		return $result;
	}
	
	public function getProperties($numeric_keys=false){
	    
	    $result = array();
	    
	    foreach($this->_properties_lookup as $fn => $id){
	    
	        if($numeric_keys){
	            $key = $id;
	        }else{
	            $key = $this->_properties_varnames_lookup[$fn];
	        }
	    
	        $result[$key] = $this->_properties[$id];
	        
		}
		
	    return $result;
	    
	}
	
	public function getPropertiesAsArrays($numeric_keys=false){
	    
	    $result = array();
	    
	    foreach($this->_properties_lookup as $fn => $id){
	    
	        if($numeric_keys){
	            $key = $id;
	        }else{
	            $key = $this->_properties_varnames_lookup[$fn];
	        }
	    
	        $result[$key] = $this->_properties[$id]->__toArray();
	        $result[$key]['_type_info'] = $this->_properties[$id]->getTypeInfo();
            
            if($this->_properties[$id]->isForeignKey()){
                $result[$key]['_options'] = $this->_properties[$id]->getPossibleValuesAsArrays();
            }
	        
		}
		
		return $result;
		
	}
	
	public function getPropertyByNumericKey($key){
	    if(array_key_exists($key, $this->_properties)){
	        return $this->_properties[$key];
	    }else{
	        return null;
	    }
	}
	
	public function getPropertyValueByNumericKey($key, $draft=false){
	    if(array_key_exists($key, $this->_properties)){
	        if($draft){
	            return $this->_properties[$key]->getData()->getDraftContent();
            }else{
                return $this->_properties[$key]->getData()->getContent();
            }
	    }else{
	        return null;
	    }
	}
	
	public function setPropertyValueByNumericKey($key, $value){
	    
	    if(array_key_exists($key, $this->_properties)){
	        
	        if(!$this->_properties[$key]->getData()->getPropertyId()){
	            $this->_properties[$key]->getData()->setPropertyId($key);
	        }
	        
	        // print_r($this->_properties[$key]);
	        // print_r($value);
	        
	        return $this->_properties[$key]->getData()->setContent($value);
	        
	    }else{
	        return null;
	    }
	}
	
	public function __toString(){
		// return item's built-in name
		return $this->getItem()->getName();
	}
	
	/* public function __sleep(){
		$this->database = null;
	}
	
	public function __wakeUp(){
		$this->database =& SmartestPersistentObject::get('db:main');
	} */
	
	public function getWorkflowStatus(){
	    if($this->getItem()->getModified() > $this->getItem()->getLastPublished()){
	        
	        // page has changed since it was last published
	        if($this->getItem()->getChangesApproved()){
	            return self::CHANGES_APPROVED;
	        }else{
	            return self::AWAITING_APPROVAL;
	        }
	        
	    }else{
	        // page hasn't been modified
	        return self::NOT_CHANGED;
	    }
	}
	
	public function save(){
		
		$this->_save_errors = array();
		
		if(!$this->_came_from_database){
		    
		    // create web id for SmartestItem object first
		    $webid = SmartestStringHelper::random(32);
		    $this->_item->setWebId($webid);
		    
		    if($this->_item->getName()){
		        
		        $this->_item->save();
	            
	            foreach($this->_properties as $key => $value){
	                
	                $this->_properties[$key]->setContextualItemId($this->_item->getId());
	                $this->_properties[$key]->getData()->setItemId($this->_item->getId());
	                
	                if($this->_properties[$key]->getRequired() == 'TRUE'){
	                    if(!$this->_properties[$key]->getData()->getDraftContent()){
	                        // raise error
	                        $this->_save_errors[] = $key; // SmartestItemPropertyValue::OMISSION_ERROR;
	                    }else{
	                        // save the value
	                        $this->_properties[$key]->getData()->save();
	                    }
	                }else{
	                    // save the value regardless of whether it has a value
	                    $this->_properties[$key]->getData()->save();
	                }
	            }
	            
	        }else{
	            // raise error - the item had no name
	            $this->_save_errors[] = '_name';
	        }
	    }

        /* if($this->_came_from_database){
            
            // this is an update
            foreach($this->_properties as $id => $value){
                
            }
            
        }else{
            // we are inserting properties - item has just been created
            
        } */
        
        if(count($this->_save_errors)){
            return false;
        }else{
            return true;
        }
        
	}
	
	public function delete(){
		// mark as deleted
		if($this->_item instanceof SmartestItem && $this->_item->isHydrated()){
		    $this->_item->setDeleted(1);
		    $this->_item->save();
		}
	}
	
	public function publish(){
	    
	    // NOTE: the SmartestItemPropertyValue::publish() function checks the user's permission, so this one doesn't need to
	    foreach($this->_properties as $pid => $p){
	        if($p instanceof SmartestItemProperty){
	            $p->getData()->publish();
	        }
	    }
	    
	    $this->_item->setChangesApproved(1);
	    $this->_item->setLastPublished(time());
	    $this->_item->setIsHeld(0);
	    $this->_item->setPublic('TRUE');
	    $this->_item->save();
	    
	}
	
	public function unPublish(){
	    $this->_item->setPublic('FALSE');
	    $this->_item->save();
	}
	
	public function isApproved(){
	    return ($this->_item->getChangesApproved() == 1) ? true : false;
	}
    
    public static function getModelClassName($item_id){
	    
	    $item = new SmartestItem;
	    $item->hydrate($item_id);
	    $model_id = $item->getItemclassId();
	    
	    $model = new SmartestModel;
	    $model->hydrate($model_id);
	    return $model->getClassName();
	    
    }
    
    // builds a fully populated object of the correct type from just the primary key or webid
    public static function retrieveByPk($item_id, $dont_bother_with_class=false){
        
        if(!$dont_bother_with_class){
            $className = self::getModelClassName($item_id);
        }
        
        if(!$dont_bother_with_class && class_exists($className)){
            $object = new $className;
        }else{
            $object = new SmartestCmsItem;
        }
        
        if($object->hydrate($item_id)){
            return $object;
        }else{
            return null;
        }
    }
    
    protected function getDataStore(){
        return SmartestPersistentObject::get('centralDataHolder');
    }
	
}




class SmartestDataUtility{

	protected $database;
	
	public function __construct(){
		$this->database = SmartestPersistentObject::get('db:main');
	}
	
	public function getModels($simple = false, $site_id=''){
		
		if($simple){
			$sql = "SELECT itemclass_id FROM ItemClasses";
		}else{
			$sql = "SELECT * FROM ItemClasses";
		}
		
		if(is_numeric($site_id)){
		    $sql .= " WHERE itemclass_site_id='".$site_id."'";
		}
		
		$sql .= ' ORDER BY itemclass_name';
		
		$result = $this->database->queryToArray($sql);
		
		if($simple){
			
			return $result;
			
		}else{
			
		    $model_objects = array();
			
			foreach($result as $model){
				$m = new SmartestModel;
				$m->hydrate($model);
				$model_objects[] = $m;
			}
			
			return $model_objects;
		}
	}
	
	public function getModelsAsArrays($simple=false, $site_id=''){
	    
	    $models = $this->getModels($simple, $site_id);
	    $arrays = array();
	    
	    foreach($models as $m){
	        $arrays[] = $m->__toArray();
	    }
	    
	    return $arrays;
	    
	}
	
	public function getDataSets($simple = false){
		
		if($simple){
			$sql = "SELECT set_id FROM Sets";
		}else{
			$sql = "SELECT * FROM Sets";
		}
		
		$result = $this->database->queryToArray($sql);
		
		if($simple){
			
			return $result;
			
		}else{
			
		    $set_objects = array();
			
		    foreach($result as $set){
			    $m = new SmartestCmsItemSet;
			    $m->hydrate($set);
			    $set_objects[] = $m;
		    }
			
		    return $set_objects;
		
		}
	}
	
	public function getTags(){
	    
	    $sql = "SELECT * FROM Tags ORDER BY tag_name";
	    $result = $this->database->queryToArray($sql);
	    $tags = array();
	    
	    foreach($result as $raw_tag_array){
	        $tag = new SmartestTag;
	        $tag->hydrate($raw_tag_array);
	        $tags[] = $tag;
	    }
	    
	    return $tags;
	    
	}
	
	public function getTagsAsArrays(){
	    
	    $tags = $this->getTags();
	    $tags_as_arrays = array();
	    
	    foreach($tags as $tag){
	        $tags_as_arrays[] = $tag->__toArray();
	    }
	    
	    return $tags_as_arrays;
	    
	}
	
	static function isValidModelName($string){
	    
	    $constant_names = array_keys(get_defined_constants());
	    $class_names = get_declared_classes();
	    // $reserved_names = array_merge($constant_names, $class_names);
	    
	    if(in_array(SmartestStringHelper::toCamelCase($string), $class_names) || in_array(SmartestStringHelper::toConstantName($string), $constant_names)){
	        return false;
	    }else{
	        return true;
	    }
	}
	
	static function getDataTypesXmlData(){
	    
	    $file_path = SM_ROOT_DIR.'System/Core/Types/datatypes.xml';
	    
	    if(SmartestCache::hasData('datatypes_xml_file_hash', true)){
	        
	        $old_hash = SmartestCache::load('datatypes_xml_file_hash', true);
	        $new_hash = md5_file($file_path);
	        
	        if($old_hash != $new_hash){
	            SmartestCache::save('datatypes_xml_file_hash', $new_hash, -1, true);
	            $raw_data = SmartestXmlHelper::loadFile($file_path);
	            $data = $raw_data['type'];
	            SmartestCache::save('datatypes_xml_file_data', $data, -1, true);
            }else{
                $data = SmartestCache::load('datatypes_xml_file_data', true);
            }
            
            // return $data;
            
        }else{
            $new_hash = md5_file($file_path);
            SmartestCache::save('datatypes_xml_file_hash', $new_hash, -1, true);
            $raw_data = SmartestXmlHelper::loadFile($file_path);
            $data = $raw_data['type'];
            SmartestCache::save('datatypes_xml_file_data', $data, -1, true);
        }
        
        return $data;
        
	}
	
	static function getDataTypes(){
	    
	    $data = self::getDataTypesXmlData();
	    
	    // print_r($data);
	    
	    $raw_types = $data;
	    $types = array();
	    
	    foreach($raw_types as $raw_type){
	        $types[$raw_type['id']] = $raw_type;
	    }
	    
	    return $types;
	}
	
	static function getAssetTypesXmlData(){
	    
	    $file_path = SM_ROOT_DIR.'System/Core/Types/assettypes.xml';
	    
	    if(SmartestCache::hasData('assettypes_xml_file_hash', true)){
	        
	        $old_hash = SmartestCache::load('assettypes_xml_file_hash', true);
	        $new_hash = md5_file($file_path);
	        
	        if($old_hash != $new_hash){
	            SmartestCache::save('assettypes_xml_file_hash', $new_hash, -1, true);
	            $raw_data = SmartestXmlHelper::loadFile($file_path);
	            $data = $raw_data['type'];
	            SmartestCache::save('assettypes_xml_file_data', $data, -1, true);
            }else{
                $data = SmartestCache::load('assettypes_xml_file_data', true);
            }
            
            // return $data;
            
        }else{
            $new_hash = md5_file($file_path);
            SmartestCache::save('assettypes_xml_file_hash', $new_hash, -1, true);
            $raw_data = SmartestXmlHelper::loadFile($file_path);
            $data = $raw_data['type'];
            SmartestCache::save('assettypes_xml_file_data', $data, -1, true);
        }
        
        return $data;
        
	}
	
	static function getAssetTypes(){
	    
	    $data = self::getAssetTypesXmlData();
	    
	    // print_r($data);
	    
	    $raw_types = $data;
	    $types = array();
	    
	    foreach($raw_types as $raw_type){
	        
	        $types[$raw_type['id']] = $raw_type;
	        
	        if(!defined($raw_type['id'])){
	            define($raw_type['id'], $raw_type['id']);
	        }
	        
	        if(is_array($types[$raw_type['id']]['suffix'])){
	            
	            if(isset($types[$raw_type['id']]['suffix']['mime'])){
	                
	                // $key = $types[$raw_type['id']]['suffix']['_content'];
	                $suffix = $types[$raw_type['id']]['suffix'];
	                $types[$raw_type['id']]['suffix'] = array();
	                $types[$raw_type['id']]['suffix'][0] = $suffix;
	                
	            }
	        
            }
            
            if(isset($types[$raw_type['id']]['param'])){
                if(isset($types[$raw_type['id']]['param']['name'])){
                    $types[$raw_type['id']]['param'] = array($types[$raw_type['id']]['param']);
                }
            }else{
                $types[$raw_type['id']]['param'] = array();
            }
	    }
	    
	    return $types;
	}
	
	static function loadBasicObjects(){
		
		$available_objects = SmartestCache::load('smartest_available_objects', true);
		
		$singlefile = '';
		
		// find the helpers if this hasn't already been done
		if(!is_array($available_objects) || !is_file(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'basicobjects.php')){
		
			$helpers = array();
			
			if($res = opendir(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'BasicObjects'.DIRECTORY_SEPARATOR)){
			
				while (false !== ($file = readdir($res))) {
        		
        			if(preg_match('/^Smartest([A-Z]\w+)\.class\.php$/', $file, $matches)){
        				// $files[] = $file;
        				// print_r($matches);
        				if($matches[1] != 'DataObject'){
        					$helper = array();
        					$helper['name'] = $matches[1];
        					$helper['file'] = $matches[0];
        					$helpers[] = $helper;
        				}
        			}
        		
				}
			
				closedir($res);
				
				SmartestCache::save('smartest_available_objects', $helpers, -1, true);
				$available_objects = $helpers;
		
			}
		
		    if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
			    include SM_ROOT_DIR.'System/Data/BasicObjects/SmartestDataObject.class.php';
		    }else{
		        $singlefile .= file_get_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'BasicObjects'.DIRECTORY_SEPARATOR.'SmartestDataObject.class.php');
		    }
		
			foreach($available_objects as $h){
				if(is_file(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'BasicObjects'.DIRECTORY_SEPARATOR.$h['file'])){
					// echo 'Loading Basic Object: '.$h['name'].'<br />';
					// include 'System/Data/BasicObjects/'.$h['file'];
					if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
					    include SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'BasicObjects'.DIRECTORY_SEPARATOR.$h['file'];
					}else{
					    $singlefile .= file_get_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'BasicObjects'.DIRECTORY_SEPARATOR.$h['file']);
				    }
				}else{
					SmartestCache::clear('smartest_available_objects', true);
				}
			}
			
			if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
		        
		    }else{
		        $singlefile = str_replace('<'.'?php', "\n", $singlefile);
    			$singlefile = str_replace('?'.'>', "\n\n", $singlefile);
    			$singlefile = "<"."?php\n\n// Auto-generated by SmartestHelper - Do Not Edit".$singlefile;
			    file_put_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'basicobjects.php', $singlefile);
			}
			
		}
		
		if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
	    
	    }else{
		    include SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'basicobjects.php';
	    }
	
	}
	
	static function loadExtendedObjects(){
		
		
		$available_objects = SmartestCache::load('smartest_available_extended_objects', true);
		
		$singlefile = '';
		
		// find the helpers if this hasn't already been done
		if(!is_array($available_objects) || !is_file(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'extendedobjects.php')){
		
			$helpers = array();
			
			if($res = opendir(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'ExtendedObjects'.DIRECTORY_SEPARATOR)){
			
				while (false !== ($file = readdir($res))) {
        		
        			if(preg_match('/([A-Z]\w+)\.class\.php$/', $file, $matches)){
        				// $files[] = $file;
        				// print_r($matches);
        				$helper = array();
        				$helper['name'] = $matches[1];
        				$helper['file'] = $matches[0];
        				$helpers[] = $helper;
        			}
        		
				}
			
				closedir($res);
				
				SmartestCache::save('smartest_available_extended_objects', $helpers, -1, true);
				$available_objects = $helpers;
		
			}
		
		    if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
			    // include SM_ROOT_DIR.'System/Data/ExtendedObjects/SmartestDataObject.class.php';
		    }else{
		        // $singlefile .= file_get_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'ExtendedObjects'.DIRECTORY_SEPARATOR.'SmartestDataObject.class.php');
		    }
		
			foreach($available_objects as $h){
				if(is_file(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'ExtendedObjects'.DIRECTORY_SEPARATOR.$h['file'])){
					// echo 'Loading Extended Object: '.$h['name'].'<br />';
					// include 'System/Data/ExtendedObjects/'.$h['file'];
					if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
					    include SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'ExtendedObjects'.DIRECTORY_SEPARATOR.$h['file'];
					}else{
					    $singlefile .= file_get_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'ExtendedObjects'.DIRECTORY_SEPARATOR.$h['file']);
				    }
				}else{
					SmartestCache::clear('smartest_available_extended_objects', true);
				}
			}
			
			if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
		        
		    }else{
		        $singlefile = str_replace('<'.'?php', "\n", $singlefile);
    			$singlefile = str_replace('?'.'>', "\n\n", $singlefile);
    			$singlefile = "<"."?php\n\n// Auto-generated by SmartestHelper - Do Not Edit".$singlefile;
			    file_put_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'extendedobjects.php', $singlefile);
			}
			
		}
		
		if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
	    
	    }else{
		    include SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'extendedobjects.php';
	    }
	
	}
	
    static function loadTypeObjects(){
		
		$available_objects = SmartestCache::load('smartest_available_type_objects', true);
		
		$singlefile = '';
		
		// find the helpers if this hasn't already been done
		if(!is_array($available_objects) || !is_file(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'typeobjects.php')){
		
			$helpers = array();
			
			if($res = opendir(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'Types'.DIRECTORY_SEPARATOR)){
			
				while (false !== ($file = readdir($res))) {
        		
        			if(preg_match('/^Smartest([A-Z]\w+)\.class\.php$/', $file, $matches)){
        				// $files[] = $file;
        				// print_r($matches);
        				if($matches[1] != 'Object'){
        					$helper = array();
        					$helper['name'] = $matches[1];
        					$helper['file'] = $matches[0];
        					$helpers[] = $helper;
        				}
        			}
        		
				}
			
				closedir($res);
				
				SmartestCache::save('smartest_available_type_objects', $helpers, -1, true);
				$available_objects = $helpers;
		
			}
		
		    if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
			    include SM_ROOT_DIR.'System/Data/Types/SmartestObject.class.php';
		    }else{
		        $singlefile .= file_get_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'Types'.DIRECTORY_SEPARATOR.'SmartestObject.class.php');
		    }
		
			foreach($available_objects as $h){
				if(is_file(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'Types'.DIRECTORY_SEPARATOR.$h['file'])){
					// echo 'Loading Basic Object: '.$h['name'].'<br />';
					// include 'System/Data/BasicObjects/'.$h['file'];
					if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
					    include SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'Types'.DIRECTORY_SEPARATOR.$h['file'];
					}else{
					    $singlefile .= file_get_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Data'.DIRECTORY_SEPARATOR.'Types'.DIRECTORY_SEPARATOR.$h['file']);
				    }
				}else{
					SmartestCache::clear('smartest_available_type_objects', true);
				}
			}
			
			if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
		        
		    }else{
		        $singlefile = str_replace('<'.'?php', "\n", $singlefile);
    			$singlefile = str_replace('?'.'>', "\n\n", $singlefile);
    			$singlefile = "<"."?php\n\n// Auto-generated by SmartestHelper - Do Not Edit".$singlefile;
			    file_put_contents(SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'typeobjects.php', $singlefile);
			}
			
		}
		
		if(defined('SM_DEVELOPER_MODE') && constant('SM_DEVELOPER_MODE')){
	    
	    }else{
		    include SM_ROOT_DIR.'System'.DIRECTORY_SEPARATOR.'Cache'.DIRECTORY_SEPARATOR.'Includes'.DIRECTORY_SEPARATOR.'typeobjects.php';
	    }
	
	}

	
	/* static function prepare(){
		require_once "System/Data/";
	} */
	
	static function stripSlashes($value){
		return is_array($value) ? array_map(array('SmartestDataUtility','stripSlashes'), $value) : utf8_encode(stripslashes($value));
	}
	
	
}




/**
 * undocumented class
 *
 * @package Smartest
 * @author Marcus Gilroy-Ware
 **/
 
class SmartestFile{
    
    protected $_original_file_path;
    protected $_current_file_path;
    
    public function __construct(){
        
    }
    
    public function loadFile($file_path){
        if(is_file($file_path)){
            $this->_original_file_path = $file_path;
            $this->_current_file_path = $file_path;
            return true;
        }else{
            // throw new SmartestException($file_path.' does not exist or is not a valid file.');
            return false;
        }
    }
    
    public function exists(){
        return file_exists($this->_current_file_path);
    }
    
    public function getPath(){
        return $this->_current_file_path;
    }
    
    public function getFileName(){
        return basename($this->getPath());
    }
    
    public function getOriginalPath(){
        return $this->_original_file_path;
    }
    
    public function rename($new_name, $force=false){
        // keeps the file in the same directory, just changes the name
    }
    
    public function moveTo($new_location, $force=false){
        // if $new_location is a directory, keep the file name as it is and just move it
        // otherwise, attempt to move it and change its name to whatever the new name was
    }
    
    public function send(){
        // send the file to the client by instantiating a new SmartestFileDownload object
    }
    
    public function getMimeType(){
        // use xml file to get mime type from dot suffix
    }

} // END class 